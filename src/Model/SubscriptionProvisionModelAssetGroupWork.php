<?php
/**
 * SubscriptionProvisionModelAssetGroupWork
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The Docusign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Model;

use \ArrayAccess;
use DocuSign\Admin\ObjectSerializer;

/**
 * SubscriptionProvisionModelAssetGroupWork Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Admin
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The Docusign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionProvisionModelAssetGroupWork implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Subscription.Provision.Model.AssetGroupWork';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'asset_group_work_id' => '?string',
        'asset_group_id' => '?string',
        'asset_group_work_type' => '?string',
        'status' => '?string',
        'order_id' => '?string',
        'target_account_id' => '?string',
        'source_account_id' => '?string',
        'source_account_external_id' => 'int',
        'source_account_name' => '?string',
        'source_account_site' => '?string',
        'clone_request_id' => '?string',
        'clone_account_details' => '\DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateCreateAccountDetails',
        'create_sub_account_details' => '\DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateCreateSubAccountDetails',
        'attempts' => '?int',
        'retry_on' => '\DateTime',
        'message' => '?string',
        'created_by_name' => '?string',
        'created_by_email' => '?string',
        'error_details' => '\DocuSign\Admin\Model\SubscriptionProvisionModelServiceErrorDetails',
        'old_asset_group_subscription_id' => '?string',
        'new_asset_group_subscription_id' => '?string',
        'source_system' => '?string',
        'source_id' => '?string',
        'created_by' => '?string',
        'created_by_type' => '?string',
        'created_date' => '\DateTime',
        'updated_by' => '?string',
        'updated_by_type' => '?string',
        'updated_date' => '\DateTime',
        'update_history' => '\DocuSign\Admin\Model\SubscriptionProvisionModelChangeEvent[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'asset_group_work_id' => 'uuid',
        'asset_group_id' => 'uuid',
        'asset_group_work_type' => null,
        'status' => null,
        'order_id' => 'uuid',
        'target_account_id' => 'uuid',
        'source_account_id' => 'uuid',
        'source_account_external_id' => 'int64',
        'source_account_name' => null,
        'source_account_site' => null,
        'clone_request_id' => 'uuid',
        'clone_account_details' => null,
        'create_sub_account_details' => null,
        'attempts' => 'int32',
        'retry_on' => 'date-time',
        'message' => null,
        'created_by_name' => null,
        'created_by_email' => null,
        'error_details' => null,
        'old_asset_group_subscription_id' => 'uuid',
        'new_asset_group_subscription_id' => 'uuid',
        'source_system' => null,
        'source_id' => null,
        'created_by' => null,
        'created_by_type' => null,
        'created_date' => 'date-time',
        'updated_by' => null,
        'updated_by_type' => null,
        'updated_date' => 'date-time',
        'update_history' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asset_group_work_id' => 'AssetGroupWorkId',
        'asset_group_id' => 'AssetGroupId',
        'asset_group_work_type' => 'AssetGroupWorkType',
        'status' => 'Status',
        'order_id' => 'OrderId',
        'target_account_id' => 'TargetAccountId',
        'source_account_id' => 'SourceAccountId',
        'source_account_external_id' => 'SourceAccountExternalId',
        'source_account_name' => 'SourceAccountName',
        'source_account_site' => 'SourceAccountSite',
        'clone_request_id' => 'CloneRequestId',
        'clone_account_details' => 'CloneAccountDetails',
        'create_sub_account_details' => 'CreateSubAccountDetails',
        'attempts' => 'Attempts',
        'retry_on' => 'RetryOn',
        'message' => 'Message',
        'created_by_name' => 'CreatedByName',
        'created_by_email' => 'CreatedByEmail',
        'error_details' => 'ErrorDetails',
        'old_asset_group_subscription_id' => 'OldAssetGroupSubscriptionId',
        'new_asset_group_subscription_id' => 'NewAssetGroupSubscriptionId',
        'source_system' => 'SourceSystem',
        'source_id' => 'SourceId',
        'created_by' => 'CreatedBy',
        'created_by_type' => 'CreatedByType',
        'created_date' => 'CreatedDate',
        'updated_by' => 'UpdatedBy',
        'updated_by_type' => 'UpdatedByType',
        'updated_date' => 'UpdatedDate',
        'update_history' => 'UpdateHistory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asset_group_work_id' => 'setAssetGroupWorkId',
        'asset_group_id' => 'setAssetGroupId',
        'asset_group_work_type' => 'setAssetGroupWorkType',
        'status' => 'setStatus',
        'order_id' => 'setOrderId',
        'target_account_id' => 'setTargetAccountId',
        'source_account_id' => 'setSourceAccountId',
        'source_account_external_id' => 'setSourceAccountExternalId',
        'source_account_name' => 'setSourceAccountName',
        'source_account_site' => 'setSourceAccountSite',
        'clone_request_id' => 'setCloneRequestId',
        'clone_account_details' => 'setCloneAccountDetails',
        'create_sub_account_details' => 'setCreateSubAccountDetails',
        'attempts' => 'setAttempts',
        'retry_on' => 'setRetryOn',
        'message' => 'setMessage',
        'created_by_name' => 'setCreatedByName',
        'created_by_email' => 'setCreatedByEmail',
        'error_details' => 'setErrorDetails',
        'old_asset_group_subscription_id' => 'setOldAssetGroupSubscriptionId',
        'new_asset_group_subscription_id' => 'setNewAssetGroupSubscriptionId',
        'source_system' => 'setSourceSystem',
        'source_id' => 'setSourceId',
        'created_by' => 'setCreatedBy',
        'created_by_type' => 'setCreatedByType',
        'created_date' => 'setCreatedDate',
        'updated_by' => 'setUpdatedBy',
        'updated_by_type' => 'setUpdatedByType',
        'updated_date' => 'setUpdatedDate',
        'update_history' => 'setUpdateHistory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asset_group_work_id' => 'getAssetGroupWorkId',
        'asset_group_id' => 'getAssetGroupId',
        'asset_group_work_type' => 'getAssetGroupWorkType',
        'status' => 'getStatus',
        'order_id' => 'getOrderId',
        'target_account_id' => 'getTargetAccountId',
        'source_account_id' => 'getSourceAccountId',
        'source_account_external_id' => 'getSourceAccountExternalId',
        'source_account_name' => 'getSourceAccountName',
        'source_account_site' => 'getSourceAccountSite',
        'clone_request_id' => 'getCloneRequestId',
        'clone_account_details' => 'getCloneAccountDetails',
        'create_sub_account_details' => 'getCreateSubAccountDetails',
        'attempts' => 'getAttempts',
        'retry_on' => 'getRetryOn',
        'message' => 'getMessage',
        'created_by_name' => 'getCreatedByName',
        'created_by_email' => 'getCreatedByEmail',
        'error_details' => 'getErrorDetails',
        'old_asset_group_subscription_id' => 'getOldAssetGroupSubscriptionId',
        'new_asset_group_subscription_id' => 'getNewAssetGroupSubscriptionId',
        'source_system' => 'getSourceSystem',
        'source_id' => 'getSourceId',
        'created_by' => 'getCreatedBy',
        'created_by_type' => 'getCreatedByType',
        'created_date' => 'getCreatedDate',
        'updated_by' => 'getUpdatedBy',
        'updated_by_type' => 'getUpdatedByType',
        'updated_date' => 'getUpdatedDate',
        'update_history' => 'getUpdateHistory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ASSET_GROUP_WORK_TYPE_UNDEFINED = 'Undefined';
    const ASSET_GROUP_WORK_TYPE_GROUP_ASSET_FULFILLMENT = 'GroupAssetFulfillment';
    const ASSET_GROUP_WORK_TYPE_ACCOUNT_ASSET_FULFILLMENT = 'AccountAssetFulfillment';
    const ASSET_GROUP_WORK_TYPE_ACCOUNT_ASSET_CLONE = 'AccountAssetClone';
    const ASSET_GROUP_WORK_TYPE_ACCOUNT_ASSET_CREATE = 'AccountAssetCreate';
    const ASSET_GROUP_WORK_TYPE_SUBSCRIPTION_SYNC = 'SubscriptionSync';
    const STATUS_UNDEFINED = 'Undefined';
    const STATUS_PENDING = 'Pending';
    const STATUS_PROCESSING = 'Processing';
    const STATUS_PROCESSING_ON_HOLD = 'ProcessingOnHold';
    const STATUS_PENDING_ERROR = 'PendingError';
    const STATUS_PROCESSING_ERROR = 'ProcessingError';
    const STATUS_COMPLETED = 'Completed';
    const STATUS_CANCELED = 'Canceled';
    const STATUS_PERMANENT_FAILURE = 'PermanentFailure';
    const CREATED_BY_TYPE_APPLICATION = 'Application';
    const CREATED_BY_TYPE_USER = 'User';
    const CREATED_BY_TYPE_GENERIC = 'Generic';
    const CREATED_BY_TYPE_REST_API_AUTH = 'RestAPIAuth';
    const CREATED_BY_TYPE_RESOURCE = 'Resource';
    const CREATED_BY_TYPE_RESTRICTED = 'Restricted';
    const UPDATED_BY_TYPE_APPLICATION = 'Application';
    const UPDATED_BY_TYPE_USER = 'User';
    const UPDATED_BY_TYPE_GENERIC = 'Generic';
    const UPDATED_BY_TYPE_REST_API_AUTH = 'RestAPIAuth';
    const UPDATED_BY_TYPE_RESOURCE = 'Resource';
    const UPDATED_BY_TYPE_RESTRICTED = 'Restricted';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssetGroupWorkTypeAllowableValues()
    {
        return [
            self::ASSET_GROUP_WORK_TYPE_UNDEFINED,
            self::ASSET_GROUP_WORK_TYPE_GROUP_ASSET_FULFILLMENT,
            self::ASSET_GROUP_WORK_TYPE_ACCOUNT_ASSET_FULFILLMENT,
            self::ASSET_GROUP_WORK_TYPE_ACCOUNT_ASSET_CLONE,
            self::ASSET_GROUP_WORK_TYPE_ACCOUNT_ASSET_CREATE,
            self::ASSET_GROUP_WORK_TYPE_SUBSCRIPTION_SYNC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_UNDEFINED,
            self::STATUS_PENDING,
            self::STATUS_PROCESSING,
            self::STATUS_PROCESSING_ON_HOLD,
            self::STATUS_PENDING_ERROR,
            self::STATUS_PROCESSING_ERROR,
            self::STATUS_COMPLETED,
            self::STATUS_CANCELED,
            self::STATUS_PERMANENT_FAILURE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCreatedByTypeAllowableValues()
    {
        return [
            self::CREATED_BY_TYPE_APPLICATION,
            self::CREATED_BY_TYPE_USER,
            self::CREATED_BY_TYPE_GENERIC,
            self::CREATED_BY_TYPE_REST_API_AUTH,
            self::CREATED_BY_TYPE_RESOURCE,
            self::CREATED_BY_TYPE_RESTRICTED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUpdatedByTypeAllowableValues()
    {
        return [
            self::UPDATED_BY_TYPE_APPLICATION,
            self::UPDATED_BY_TYPE_USER,
            self::UPDATED_BY_TYPE_GENERIC,
            self::UPDATED_BY_TYPE_REST_API_AUTH,
            self::UPDATED_BY_TYPE_RESOURCE,
            self::UPDATED_BY_TYPE_RESTRICTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asset_group_work_id'] = isset($data['asset_group_work_id']) ? $data['asset_group_work_id'] : null;
        $this->container['asset_group_id'] = isset($data['asset_group_id']) ? $data['asset_group_id'] : null;
        $this->container['asset_group_work_type'] = isset($data['asset_group_work_type']) ? $data['asset_group_work_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['target_account_id'] = isset($data['target_account_id']) ? $data['target_account_id'] : null;
        $this->container['source_account_id'] = isset($data['source_account_id']) ? $data['source_account_id'] : null;
        $this->container['source_account_external_id'] = isset($data['source_account_external_id']) ? $data['source_account_external_id'] : null;
        $this->container['source_account_name'] = isset($data['source_account_name']) ? $data['source_account_name'] : null;
        $this->container['source_account_site'] = isset($data['source_account_site']) ? $data['source_account_site'] : null;
        $this->container['clone_request_id'] = isset($data['clone_request_id']) ? $data['clone_request_id'] : null;
        $this->container['clone_account_details'] = isset($data['clone_account_details']) ? $data['clone_account_details'] : null;
        $this->container['create_sub_account_details'] = isset($data['create_sub_account_details']) ? $data['create_sub_account_details'] : null;
        $this->container['attempts'] = isset($data['attempts']) ? $data['attempts'] : null;
        $this->container['retry_on'] = isset($data['retry_on']) ? $data['retry_on'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['created_by_name'] = isset($data['created_by_name']) ? $data['created_by_name'] : null;
        $this->container['created_by_email'] = isset($data['created_by_email']) ? $data['created_by_email'] : null;
        $this->container['error_details'] = isset($data['error_details']) ? $data['error_details'] : null;
        $this->container['old_asset_group_subscription_id'] = isset($data['old_asset_group_subscription_id']) ? $data['old_asset_group_subscription_id'] : null;
        $this->container['new_asset_group_subscription_id'] = isset($data['new_asset_group_subscription_id']) ? $data['new_asset_group_subscription_id'] : null;
        $this->container['source_system'] = isset($data['source_system']) ? $data['source_system'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['created_by_type'] = isset($data['created_by_type']) ? $data['created_by_type'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['updated_by_type'] = isset($data['updated_by_type']) ? $data['updated_by_type'] : null;
        $this->container['updated_date'] = isset($data['updated_date']) ? $data['updated_date'] : null;
        $this->container['update_history'] = isset($data['update_history']) ? $data['update_history'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAssetGroupWorkTypeAllowableValues();
        if (!is_null($this->container['asset_group_work_type']) && !in_array($this->container['asset_group_work_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'asset_group_work_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCreatedByTypeAllowableValues();
        if (!is_null($this->container['created_by_type']) && !in_array($this->container['created_by_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'created_by_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUpdatedByTypeAllowableValues();
        if (!is_null($this->container['updated_by_type']) && !in_array($this->container['updated_by_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'updated_by_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asset_group_work_id
     *
     * @return ?string
     */
    public function getAssetGroupWorkId()
    {
        return $this->container['asset_group_work_id'];
    }

    /**
     * Sets asset_group_work_id
     *
     * @param ?string $asset_group_work_id asset_group_work_id
     *
     * @return $this
     */
    public function setAssetGroupWorkId($asset_group_work_id)
    {
        $this->container['asset_group_work_id'] = $asset_group_work_id;

        return $this;
    }

    /**
     * Gets asset_group_id
     *
     * @return ?string
     */
    public function getAssetGroupId()
    {
        return $this->container['asset_group_id'];
    }

    /**
     * Sets asset_group_id
     *
     * @param ?string $asset_group_id asset_group_id
     *
     * @return $this
     */
    public function setAssetGroupId($asset_group_id)
    {
        $this->container['asset_group_id'] = $asset_group_id;

        return $this;
    }

    /**
     * Gets asset_group_work_type
     *
     * @return ?string
     */
    public function getAssetGroupWorkType()
    {
        return $this->container['asset_group_work_type'];
    }

    /**
     * Sets asset_group_work_type
     *
     * @param ?string $asset_group_work_type asset_group_work_type
     *
     * @return $this
     */
    public function setAssetGroupWorkType($asset_group_work_type)
    {
        $allowedValues = $this->getAssetGroupWorkTypeAllowableValues();
        if (!is_null($asset_group_work_type) && !in_array($asset_group_work_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'asset_group_work_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['asset_group_work_type'] = $asset_group_work_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return ?string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param ?string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return ?string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param ?string $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets target_account_id
     *
     * @return ?string
     */
    public function getTargetAccountId()
    {
        return $this->container['target_account_id'];
    }

    /**
     * Sets target_account_id
     *
     * @param ?string $target_account_id target_account_id
     *
     * @return $this
     */
    public function setTargetAccountId($target_account_id)
    {
        $this->container['target_account_id'] = $target_account_id;

        return $this;
    }

    /**
     * Gets source_account_id
     *
     * @return ?string
     */
    public function getSourceAccountId()
    {
        return $this->container['source_account_id'];
    }

    /**
     * Sets source_account_id
     *
     * @param ?string $source_account_id source_account_id
     *
     * @return $this
     */
    public function setSourceAccountId($source_account_id)
    {
        $this->container['source_account_id'] = $source_account_id;

        return $this;
    }

    /**
     * Gets source_account_external_id
     *
     * @return int
     */
    public function getSourceAccountExternalId()
    {
        return $this->container['source_account_external_id'];
    }

    /**
     * Sets source_account_external_id
     *
     * @param int $source_account_external_id source_account_external_id
     *
     * @return $this
     */
    public function setSourceAccountExternalId($source_account_external_id)
    {
        $this->container['source_account_external_id'] = $source_account_external_id;

        return $this;
    }

    /**
     * Gets source_account_name
     *
     * @return ?string
     */
    public function getSourceAccountName()
    {
        return $this->container['source_account_name'];
    }

    /**
     * Sets source_account_name
     *
     * @param ?string $source_account_name source_account_name
     *
     * @return $this
     */
    public function setSourceAccountName($source_account_name)
    {
        $this->container['source_account_name'] = $source_account_name;

        return $this;
    }

    /**
     * Gets source_account_site
     *
     * @return ?string
     */
    public function getSourceAccountSite()
    {
        return $this->container['source_account_site'];
    }

    /**
     * Sets source_account_site
     *
     * @param ?string $source_account_site source_account_site
     *
     * @return $this
     */
    public function setSourceAccountSite($source_account_site)
    {
        $this->container['source_account_site'] = $source_account_site;

        return $this;
    }

    /**
     * Gets clone_request_id
     *
     * @return ?string
     */
    public function getCloneRequestId()
    {
        return $this->container['clone_request_id'];
    }

    /**
     * Sets clone_request_id
     *
     * @param ?string $clone_request_id clone_request_id
     *
     * @return $this
     */
    public function setCloneRequestId($clone_request_id)
    {
        $this->container['clone_request_id'] = $clone_request_id;

        return $this;
    }

    /**
     * Gets clone_account_details
     *
     * @return \DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateCreateAccountDetails
     */
    public function getCloneAccountDetails()
    {
        return $this->container['clone_account_details'];
    }

    /**
     * Sets clone_account_details
     *
     * @param \DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateCreateAccountDetails $clone_account_details clone_account_details
     *
     * @return $this
     */
    public function setCloneAccountDetails($clone_account_details)
    {
        $this->container['clone_account_details'] = $clone_account_details;

        return $this;
    }

    /**
     * Gets create_sub_account_details
     *
     * @return \DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateCreateSubAccountDetails
     */
    public function getCreateSubAccountDetails()
    {
        return $this->container['create_sub_account_details'];
    }

    /**
     * Sets create_sub_account_details
     *
     * @param \DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateCreateSubAccountDetails $create_sub_account_details create_sub_account_details
     *
     * @return $this
     */
    public function setCreateSubAccountDetails($create_sub_account_details)
    {
        $this->container['create_sub_account_details'] = $create_sub_account_details;

        return $this;
    }

    /**
     * Gets attempts
     *
     * @return ?int
     */
    public function getAttempts()
    {
        return $this->container['attempts'];
    }

    /**
     * Sets attempts
     *
     * @param ?int $attempts attempts
     *
     * @return $this
     */
    public function setAttempts($attempts)
    {
        $this->container['attempts'] = $attempts;

        return $this;
    }

    /**
     * Gets retry_on
     *
     * @return \DateTime
     */
    public function getRetryOn()
    {
        return $this->container['retry_on'];
    }

    /**
     * Sets retry_on
     *
     * @param \DateTime $retry_on retry_on
     *
     * @return $this
     */
    public function setRetryOn($retry_on)
    {
        $this->container['retry_on'] = $retry_on;

        return $this;
    }

    /**
     * Gets message
     *
     * @return ?string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param ?string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets created_by_name
     *
     * @return ?string
     */
    public function getCreatedByName()
    {
        return $this->container['created_by_name'];
    }

    /**
     * Sets created_by_name
     *
     * @param ?string $created_by_name created_by_name
     *
     * @return $this
     */
    public function setCreatedByName($created_by_name)
    {
        $this->container['created_by_name'] = $created_by_name;

        return $this;
    }

    /**
     * Gets created_by_email
     *
     * @return ?string
     */
    public function getCreatedByEmail()
    {
        return $this->container['created_by_email'];
    }

    /**
     * Sets created_by_email
     *
     * @param ?string $created_by_email created_by_email
     *
     * @return $this
     */
    public function setCreatedByEmail($created_by_email)
    {
        $this->container['created_by_email'] = $created_by_email;

        return $this;
    }

    /**
     * Gets error_details
     *
     * @return \DocuSign\Admin\Model\SubscriptionProvisionModelServiceErrorDetails
     */
    public function getErrorDetails()
    {
        return $this->container['error_details'];
    }

    /**
     * Sets error_details
     *
     * @param \DocuSign\Admin\Model\SubscriptionProvisionModelServiceErrorDetails $error_details error_details
     *
     * @return $this
     */
    public function setErrorDetails($error_details)
    {
        $this->container['error_details'] = $error_details;

        return $this;
    }

    /**
     * Gets old_asset_group_subscription_id
     *
     * @return ?string
     */
    public function getOldAssetGroupSubscriptionId()
    {
        return $this->container['old_asset_group_subscription_id'];
    }

    /**
     * Sets old_asset_group_subscription_id
     *
     * @param ?string $old_asset_group_subscription_id old_asset_group_subscription_id
     *
     * @return $this
     */
    public function setOldAssetGroupSubscriptionId($old_asset_group_subscription_id)
    {
        $this->container['old_asset_group_subscription_id'] = $old_asset_group_subscription_id;

        return $this;
    }

    /**
     * Gets new_asset_group_subscription_id
     *
     * @return ?string
     */
    public function getNewAssetGroupSubscriptionId()
    {
        return $this->container['new_asset_group_subscription_id'];
    }

    /**
     * Sets new_asset_group_subscription_id
     *
     * @param ?string $new_asset_group_subscription_id new_asset_group_subscription_id
     *
     * @return $this
     */
    public function setNewAssetGroupSubscriptionId($new_asset_group_subscription_id)
    {
        $this->container['new_asset_group_subscription_id'] = $new_asset_group_subscription_id;

        return $this;
    }

    /**
     * Gets source_system
     *
     * @return ?string
     */
    public function getSourceSystem()
    {
        return $this->container['source_system'];
    }

    /**
     * Sets source_system
     *
     * @param ?string $source_system source_system
     *
     * @return $this
     */
    public function setSourceSystem($source_system)
    {
        $this->container['source_system'] = $source_system;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return ?string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param ?string $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return ?string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param ?string $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_by_type
     *
     * @return ?string
     */
    public function getCreatedByType()
    {
        return $this->container['created_by_type'];
    }

    /**
     * Sets created_by_type
     *
     * @param ?string $created_by_type created_by_type
     *
     * @return $this
     */
    public function setCreatedByType($created_by_type)
    {
        $allowedValues = $this->getCreatedByTypeAllowableValues();
        if (!is_null($created_by_type) && !in_array($created_by_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'created_by_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['created_by_type'] = $created_by_type;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return ?string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param ?string $updated_by updated_by
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_by_type
     *
     * @return ?string
     */
    public function getUpdatedByType()
    {
        return $this->container['updated_by_type'];
    }

    /**
     * Sets updated_by_type
     *
     * @param ?string $updated_by_type updated_by_type
     *
     * @return $this
     */
    public function setUpdatedByType($updated_by_type)
    {
        $allowedValues = $this->getUpdatedByTypeAllowableValues();
        if (!is_null($updated_by_type) && !in_array($updated_by_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'updated_by_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['updated_by_type'] = $updated_by_type;

        return $this;
    }

    /**
     * Gets updated_date
     *
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->container['updated_date'];
    }

    /**
     * Sets updated_date
     *
     * @param \DateTime $updated_date updated_date
     *
     * @return $this
     */
    public function setUpdatedDate($updated_date)
    {
        $this->container['updated_date'] = $updated_date;

        return $this;
    }

    /**
     * Gets update_history
     *
     * @return \DocuSign\Admin\Model\SubscriptionProvisionModelChangeEvent[]
     */
    public function getUpdateHistory()
    {
        return $this->container['update_history'];
    }

    /**
     * Sets update_history
     *
     * @param \DocuSign\Admin\Model\SubscriptionProvisionModelChangeEvent[] $update_history update_history
     *
     * @return $this
     */
    public function setUpdateHistory($update_history)
    {
        $this->container['update_history'] = $update_history;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

