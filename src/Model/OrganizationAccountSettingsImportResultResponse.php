<?php
/**
 * OrganizationAccountSettingsImportResultResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Model;

use \ArrayAccess;
use DocuSign\Admin\ObjectSerializer;

/**
 * OrganizationAccountSettingsImportResultResponse Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Admin
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrganizationAccountSettingsImportResultResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationAccountSettingsImportResultResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '?string',
        'site_id' => '?int',
        'url' => '?string',
        'number_processed_accounts' => 'int',
        'error_details' => '\DocuSign\Admin\Model\OASIRRErrorDetails',
        'processing_issues_by_account' => '\DocuSign\Admin\Model\OASIRROrganizationAccountSettingsErrorDataResponse[]',
        'number_unprocessed_accounts' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'site_id' => 'int32',
        'url' => null,
        'number_processed_accounts' => 'int64',
        'error_details' => null,
        'processing_issues_by_account' => null,
        'number_unprocessed_accounts' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'site_id' => 'site_id',
        'url' => 'url',
        'number_processed_accounts' => 'number_processed_accounts',
        'error_details' => 'error_details',
        'processing_issues_by_account' => 'processing_issues_by_account',
        'number_unprocessed_accounts' => 'number_unprocessed_accounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'site_id' => 'setSiteId',
        'url' => 'setUrl',
        'number_processed_accounts' => 'setNumberProcessedAccounts',
        'error_details' => 'setErrorDetails',
        'processing_issues_by_account' => 'setProcessingIssuesByAccount',
        'number_unprocessed_accounts' => 'setNumberUnprocessedAccounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'site_id' => 'getSiteId',
        'url' => 'getUrl',
        'number_processed_accounts' => 'getNumberProcessedAccounts',
        'error_details' => 'getErrorDetails',
        'processing_issues_by_account' => 'getProcessingIssuesByAccount',
        'number_unprocessed_accounts' => 'getNumberUnprocessedAccounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['number_processed_accounts'] = isset($data['number_processed_accounts']) ? $data['number_processed_accounts'] : null;
        $this->container['error_details'] = isset($data['error_details']) ? $data['error_details'] : null;
        $this->container['processing_issues_by_account'] = isset($data['processing_issues_by_account']) ? $data['processing_issues_by_account'] : null;
        $this->container['number_unprocessed_accounts'] = isset($data['number_unprocessed_accounts']) ? $data['number_unprocessed_accounts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return ?string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param ?string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return ?int
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param ?int $site_id site_id
     *
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return ?string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param ?string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets number_processed_accounts
     *
     * @return int
     */
    public function getNumberProcessedAccounts()
    {
        return $this->container['number_processed_accounts'];
    }

    /**
     * Sets number_processed_accounts
     *
     * @param int $number_processed_accounts number_processed_accounts
     *
     * @return $this
     */
    public function setNumberProcessedAccounts($number_processed_accounts)
    {
        $this->container['number_processed_accounts'] = $number_processed_accounts;

        return $this;
    }

    /**
     * Gets error_details
     *
     * @return \DocuSign\Admin\Model\OASIRRErrorDetails
     */
    public function getErrorDetails()
    {
        return $this->container['error_details'];
    }

    /**
     * Sets error_details
     *
     * @param \DocuSign\Admin\Model\OASIRRErrorDetails $error_details error_details
     *
     * @return $this
     */
    public function setErrorDetails($error_details)
    {
        $this->container['error_details'] = $error_details;

        return $this;
    }

    /**
     * Gets processing_issues_by_account
     *
     * @return \DocuSign\Admin\Model\OASIRROrganizationAccountSettingsErrorDataResponse[]
     */
    public function getProcessingIssuesByAccount()
    {
        return $this->container['processing_issues_by_account'];
    }

    /**
     * Sets processing_issues_by_account
     *
     * @param \DocuSign\Admin\Model\OASIRROrganizationAccountSettingsErrorDataResponse[] $processing_issues_by_account processing_issues_by_account
     *
     * @return $this
     */
    public function setProcessingIssuesByAccount($processing_issues_by_account)
    {
        $this->container['processing_issues_by_account'] = $processing_issues_by_account;

        return $this;
    }

    /**
     * Gets number_unprocessed_accounts
     *
     * @return int
     */
    public function getNumberUnprocessedAccounts()
    {
        return $this->container['number_unprocessed_accounts'];
    }

    /**
     * Sets number_unprocessed_accounts
     *
     * @param int $number_unprocessed_accounts number_unprocessed_accounts
     *
     * @return $this
     */
    public function setNumberUnprocessedAccounts($number_unprocessed_accounts)
    {
        $this->container['number_unprocessed_accounts'] = $number_unprocessed_accounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

