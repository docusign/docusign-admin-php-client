<?php
/**
 * OrganizationImportResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Model;

use \ArrayAccess;
use DocuSign\Admin\ObjectSerializer;

/**
 * OrganizationImportResponse Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Admin
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrganizationImportResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationImportResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '?string',
        'type' => '?string',
        'requestor' => '\DocuSign\Admin\Model\OrganizationImportResponseRequestor',
        'created' => '\DateTime',
        'last_modified' => '\DateTime',
        'status' => '?string',
        'user_count' => '?int',
        'processed_user_count' => '?int',
        'added_user_count' => '?int',
        'updated_user_count' => '?int',
        'closed_user_count' => '?int',
        'no_action_required_user_count' => '?int',
        'error_count' => '?int',
        'warning_count' => '?int',
        'invalid_column_headers' => '?string',
        'imports_not_found_or_not_available_for_accounts' => '?string',
        'imports_failed_for_accounts' => '?string',
        'imports_timed_out_for_accounts' => '?string',
        'imports_not_found_or_not_available_for_sites' => '?string',
        'imports_failed_for_sites' => '?string',
        'imports_timed_out_for_sites' => '?string',
        'file_level_error_rollups' => '\DocuSign\Admin\Model\OrganizationImportResponseErrorRollup[]',
        'user_level_error_rollups' => '\DocuSign\Admin\Model\OrganizationImportResponseErrorRollup[]',
        'user_level_warning_rollups' => '\DocuSign\Admin\Model\OrganizationImportResponseWarningRollup[]',
        'has_csv_results' => '?bool',
        'results_uri' => '?string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'type' => null,
        'requestor' => null,
        'created' => 'date-time',
        'last_modified' => 'date-time',
        'status' => null,
        'user_count' => 'int32',
        'processed_user_count' => 'int32',
        'added_user_count' => 'int32',
        'updated_user_count' => 'int32',
        'closed_user_count' => 'int32',
        'no_action_required_user_count' => 'int32',
        'error_count' => 'int32',
        'warning_count' => 'int32',
        'invalid_column_headers' => null,
        'imports_not_found_or_not_available_for_accounts' => null,
        'imports_failed_for_accounts' => null,
        'imports_timed_out_for_accounts' => null,
        'imports_not_found_or_not_available_for_sites' => null,
        'imports_failed_for_sites' => null,
        'imports_timed_out_for_sites' => null,
        'file_level_error_rollups' => null,
        'user_level_error_rollups' => null,
        'user_level_warning_rollups' => null,
        'has_csv_results' => null,
        'results_uri' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'requestor' => 'requestor',
        'created' => 'created',
        'last_modified' => 'last_modified',
        'status' => 'status',
        'user_count' => 'user_count',
        'processed_user_count' => 'processed_user_count',
        'added_user_count' => 'added_user_count',
        'updated_user_count' => 'updated_user_count',
        'closed_user_count' => 'closed_user_count',
        'no_action_required_user_count' => 'no_action_required_user_count',
        'error_count' => 'error_count',
        'warning_count' => 'warning_count',
        'invalid_column_headers' => 'invalid_column_headers',
        'imports_not_found_or_not_available_for_accounts' => 'imports_not_found_or_not_available_for_accounts',
        'imports_failed_for_accounts' => 'imports_failed_for_accounts',
        'imports_timed_out_for_accounts' => 'imports_timed_out_for_accounts',
        'imports_not_found_or_not_available_for_sites' => 'imports_not_found_or_not_available_for_sites',
        'imports_failed_for_sites' => 'imports_failed_for_sites',
        'imports_timed_out_for_sites' => 'imports_timed_out_for_sites',
        'file_level_error_rollups' => 'file_level_error_rollups',
        'user_level_error_rollups' => 'user_level_error_rollups',
        'user_level_warning_rollups' => 'user_level_warning_rollups',
        'has_csv_results' => 'has_csv_results',
        'results_uri' => 'results_uri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'requestor' => 'setRequestor',
        'created' => 'setCreated',
        'last_modified' => 'setLastModified',
        'status' => 'setStatus',
        'user_count' => 'setUserCount',
        'processed_user_count' => 'setProcessedUserCount',
        'added_user_count' => 'setAddedUserCount',
        'updated_user_count' => 'setUpdatedUserCount',
        'closed_user_count' => 'setClosedUserCount',
        'no_action_required_user_count' => 'setNoActionRequiredUserCount',
        'error_count' => 'setErrorCount',
        'warning_count' => 'setWarningCount',
        'invalid_column_headers' => 'setInvalidColumnHeaders',
        'imports_not_found_or_not_available_for_accounts' => 'setImportsNotFoundOrNotAvailableForAccounts',
        'imports_failed_for_accounts' => 'setImportsFailedForAccounts',
        'imports_timed_out_for_accounts' => 'setImportsTimedOutForAccounts',
        'imports_not_found_or_not_available_for_sites' => 'setImportsNotFoundOrNotAvailableForSites',
        'imports_failed_for_sites' => 'setImportsFailedForSites',
        'imports_timed_out_for_sites' => 'setImportsTimedOutForSites',
        'file_level_error_rollups' => 'setFileLevelErrorRollups',
        'user_level_error_rollups' => 'setUserLevelErrorRollups',
        'user_level_warning_rollups' => 'setUserLevelWarningRollups',
        'has_csv_results' => 'setHasCsvResults',
        'results_uri' => 'setResultsUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'requestor' => 'getRequestor',
        'created' => 'getCreated',
        'last_modified' => 'getLastModified',
        'status' => 'getStatus',
        'user_count' => 'getUserCount',
        'processed_user_count' => 'getProcessedUserCount',
        'added_user_count' => 'getAddedUserCount',
        'updated_user_count' => 'getUpdatedUserCount',
        'closed_user_count' => 'getClosedUserCount',
        'no_action_required_user_count' => 'getNoActionRequiredUserCount',
        'error_count' => 'getErrorCount',
        'warning_count' => 'getWarningCount',
        'invalid_column_headers' => 'getInvalidColumnHeaders',
        'imports_not_found_or_not_available_for_accounts' => 'getImportsNotFoundOrNotAvailableForAccounts',
        'imports_failed_for_accounts' => 'getImportsFailedForAccounts',
        'imports_timed_out_for_accounts' => 'getImportsTimedOutForAccounts',
        'imports_not_found_or_not_available_for_sites' => 'getImportsNotFoundOrNotAvailableForSites',
        'imports_failed_for_sites' => 'getImportsFailedForSites',
        'imports_timed_out_for_sites' => 'getImportsTimedOutForSites',
        'file_level_error_rollups' => 'getFileLevelErrorRollups',
        'user_level_error_rollups' => 'getUserLevelErrorRollups',
        'user_level_warning_rollups' => 'getUserLevelWarningRollups',
        'has_csv_results' => 'getHasCsvResults',
        'results_uri' => 'getResultsUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['requestor'] = isset($data['requestor']) ? $data['requestor'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['user_count'] = isset($data['user_count']) ? $data['user_count'] : null;
        $this->container['processed_user_count'] = isset($data['processed_user_count']) ? $data['processed_user_count'] : null;
        $this->container['added_user_count'] = isset($data['added_user_count']) ? $data['added_user_count'] : null;
        $this->container['updated_user_count'] = isset($data['updated_user_count']) ? $data['updated_user_count'] : null;
        $this->container['closed_user_count'] = isset($data['closed_user_count']) ? $data['closed_user_count'] : null;
        $this->container['no_action_required_user_count'] = isset($data['no_action_required_user_count']) ? $data['no_action_required_user_count'] : null;
        $this->container['error_count'] = isset($data['error_count']) ? $data['error_count'] : null;
        $this->container['warning_count'] = isset($data['warning_count']) ? $data['warning_count'] : null;
        $this->container['invalid_column_headers'] = isset($data['invalid_column_headers']) ? $data['invalid_column_headers'] : null;
        $this->container['imports_not_found_or_not_available_for_accounts'] = isset($data['imports_not_found_or_not_available_for_accounts']) ? $data['imports_not_found_or_not_available_for_accounts'] : null;
        $this->container['imports_failed_for_accounts'] = isset($data['imports_failed_for_accounts']) ? $data['imports_failed_for_accounts'] : null;
        $this->container['imports_timed_out_for_accounts'] = isset($data['imports_timed_out_for_accounts']) ? $data['imports_timed_out_for_accounts'] : null;
        $this->container['imports_not_found_or_not_available_for_sites'] = isset($data['imports_not_found_or_not_available_for_sites']) ? $data['imports_not_found_or_not_available_for_sites'] : null;
        $this->container['imports_failed_for_sites'] = isset($data['imports_failed_for_sites']) ? $data['imports_failed_for_sites'] : null;
        $this->container['imports_timed_out_for_sites'] = isset($data['imports_timed_out_for_sites']) ? $data['imports_timed_out_for_sites'] : null;
        $this->container['file_level_error_rollups'] = isset($data['file_level_error_rollups']) ? $data['file_level_error_rollups'] : null;
        $this->container['user_level_error_rollups'] = isset($data['user_level_error_rollups']) ? $data['user_level_error_rollups'] : null;
        $this->container['user_level_warning_rollups'] = isset($data['user_level_warning_rollups']) ? $data['user_level_warning_rollups'] : null;
        $this->container['has_csv_results'] = isset($data['has_csv_results']) ? $data['has_csv_results'] : null;
        $this->container['results_uri'] = isset($data['results_uri']) ? $data['results_uri'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return ?string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param ?string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return ?string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param ?string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets requestor
     *
     * @return \DocuSign\Admin\Model\OrganizationImportResponseRequestor
     */
    public function getRequestor()
    {
        return $this->container['requestor'];
    }

    /**
     * Sets requestor
     *
     * @param \DocuSign\Admin\Model\OrganizationImportResponseRequestor $requestor requestor
     *
     * @return $this
     */
    public function setRequestor($requestor)
    {
        $this->container['requestor'] = $requestor;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets status
     *
     * @return ?string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param ?string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_count
     *
     * @return ?int
     */
    public function getUserCount()
    {
        return $this->container['user_count'];
    }

    /**
     * Sets user_count
     *
     * @param ?int $user_count user_count
     *
     * @return $this
     */
    public function setUserCount($user_count)
    {
        $this->container['user_count'] = $user_count;

        return $this;
    }

    /**
     * Gets processed_user_count
     *
     * @return ?int
     */
    public function getProcessedUserCount()
    {
        return $this->container['processed_user_count'];
    }

    /**
     * Sets processed_user_count
     *
     * @param ?int $processed_user_count processed_user_count
     *
     * @return $this
     */
    public function setProcessedUserCount($processed_user_count)
    {
        $this->container['processed_user_count'] = $processed_user_count;

        return $this;
    }

    /**
     * Gets added_user_count
     *
     * @return ?int
     */
    public function getAddedUserCount()
    {
        return $this->container['added_user_count'];
    }

    /**
     * Sets added_user_count
     *
     * @param ?int $added_user_count added_user_count
     *
     * @return $this
     */
    public function setAddedUserCount($added_user_count)
    {
        $this->container['added_user_count'] = $added_user_count;

        return $this;
    }

    /**
     * Gets updated_user_count
     *
     * @return ?int
     */
    public function getUpdatedUserCount()
    {
        return $this->container['updated_user_count'];
    }

    /**
     * Sets updated_user_count
     *
     * @param ?int $updated_user_count updated_user_count
     *
     * @return $this
     */
    public function setUpdatedUserCount($updated_user_count)
    {
        $this->container['updated_user_count'] = $updated_user_count;

        return $this;
    }

    /**
     * Gets closed_user_count
     *
     * @return ?int
     */
    public function getClosedUserCount()
    {
        return $this->container['closed_user_count'];
    }

    /**
     * Sets closed_user_count
     *
     * @param ?int $closed_user_count closed_user_count
     *
     * @return $this
     */
    public function setClosedUserCount($closed_user_count)
    {
        $this->container['closed_user_count'] = $closed_user_count;

        return $this;
    }

    /**
     * Gets no_action_required_user_count
     *
     * @return ?int
     */
    public function getNoActionRequiredUserCount()
    {
        return $this->container['no_action_required_user_count'];
    }

    /**
     * Sets no_action_required_user_count
     *
     * @param ?int $no_action_required_user_count no_action_required_user_count
     *
     * @return $this
     */
    public function setNoActionRequiredUserCount($no_action_required_user_count)
    {
        $this->container['no_action_required_user_count'] = $no_action_required_user_count;

        return $this;
    }

    /**
     * Gets error_count
     *
     * @return ?int
     */
    public function getErrorCount()
    {
        return $this->container['error_count'];
    }

    /**
     * Sets error_count
     *
     * @param ?int $error_count error_count
     *
     * @return $this
     */
    public function setErrorCount($error_count)
    {
        $this->container['error_count'] = $error_count;

        return $this;
    }

    /**
     * Gets warning_count
     *
     * @return ?int
     */
    public function getWarningCount()
    {
        return $this->container['warning_count'];
    }

    /**
     * Sets warning_count
     *
     * @param ?int $warning_count warning_count
     *
     * @return $this
     */
    public function setWarningCount($warning_count)
    {
        $this->container['warning_count'] = $warning_count;

        return $this;
    }

    /**
     * Gets invalid_column_headers
     *
     * @return ?string
     */
    public function getInvalidColumnHeaders()
    {
        return $this->container['invalid_column_headers'];
    }

    /**
     * Sets invalid_column_headers
     *
     * @param ?string $invalid_column_headers invalid_column_headers
     *
     * @return $this
     */
    public function setInvalidColumnHeaders($invalid_column_headers)
    {
        $this->container['invalid_column_headers'] = $invalid_column_headers;

        return $this;
    }

    /**
     * Gets imports_not_found_or_not_available_for_accounts
     *
     * @return ?string
     */
    public function getImportsNotFoundOrNotAvailableForAccounts()
    {
        return $this->container['imports_not_found_or_not_available_for_accounts'];
    }

    /**
     * Sets imports_not_found_or_not_available_for_accounts
     *
     * @param ?string $imports_not_found_or_not_available_for_accounts imports_not_found_or_not_available_for_accounts
     *
     * @return $this
     */
    public function setImportsNotFoundOrNotAvailableForAccounts($imports_not_found_or_not_available_for_accounts)
    {
        $this->container['imports_not_found_or_not_available_for_accounts'] = $imports_not_found_or_not_available_for_accounts;

        return $this;
    }

    /**
     * Gets imports_failed_for_accounts
     *
     * @return ?string
     */
    public function getImportsFailedForAccounts()
    {
        return $this->container['imports_failed_for_accounts'];
    }

    /**
     * Sets imports_failed_for_accounts
     *
     * @param ?string $imports_failed_for_accounts imports_failed_for_accounts
     *
     * @return $this
     */
    public function setImportsFailedForAccounts($imports_failed_for_accounts)
    {
        $this->container['imports_failed_for_accounts'] = $imports_failed_for_accounts;

        return $this;
    }

    /**
     * Gets imports_timed_out_for_accounts
     *
     * @return ?string
     */
    public function getImportsTimedOutForAccounts()
    {
        return $this->container['imports_timed_out_for_accounts'];
    }

    /**
     * Sets imports_timed_out_for_accounts
     *
     * @param ?string $imports_timed_out_for_accounts imports_timed_out_for_accounts
     *
     * @return $this
     */
    public function setImportsTimedOutForAccounts($imports_timed_out_for_accounts)
    {
        $this->container['imports_timed_out_for_accounts'] = $imports_timed_out_for_accounts;

        return $this;
    }

    /**
     * Gets imports_not_found_or_not_available_for_sites
     *
     * @return ?string
     */
    public function getImportsNotFoundOrNotAvailableForSites()
    {
        return $this->container['imports_not_found_or_not_available_for_sites'];
    }

    /**
     * Sets imports_not_found_or_not_available_for_sites
     *
     * @param ?string $imports_not_found_or_not_available_for_sites imports_not_found_or_not_available_for_sites
     *
     * @return $this
     */
    public function setImportsNotFoundOrNotAvailableForSites($imports_not_found_or_not_available_for_sites)
    {
        $this->container['imports_not_found_or_not_available_for_sites'] = $imports_not_found_or_not_available_for_sites;

        return $this;
    }

    /**
     * Gets imports_failed_for_sites
     *
     * @return ?string
     */
    public function getImportsFailedForSites()
    {
        return $this->container['imports_failed_for_sites'];
    }

    /**
     * Sets imports_failed_for_sites
     *
     * @param ?string $imports_failed_for_sites imports_failed_for_sites
     *
     * @return $this
     */
    public function setImportsFailedForSites($imports_failed_for_sites)
    {
        $this->container['imports_failed_for_sites'] = $imports_failed_for_sites;

        return $this;
    }

    /**
     * Gets imports_timed_out_for_sites
     *
     * @return ?string
     */
    public function getImportsTimedOutForSites()
    {
        return $this->container['imports_timed_out_for_sites'];
    }

    /**
     * Sets imports_timed_out_for_sites
     *
     * @param ?string $imports_timed_out_for_sites imports_timed_out_for_sites
     *
     * @return $this
     */
    public function setImportsTimedOutForSites($imports_timed_out_for_sites)
    {
        $this->container['imports_timed_out_for_sites'] = $imports_timed_out_for_sites;

        return $this;
    }

    /**
     * Gets file_level_error_rollups
     *
     * @return \DocuSign\Admin\Model\OrganizationImportResponseErrorRollup[]
     */
    public function getFileLevelErrorRollups()
    {
        return $this->container['file_level_error_rollups'];
    }

    /**
     * Sets file_level_error_rollups
     *
     * @param \DocuSign\Admin\Model\OrganizationImportResponseErrorRollup[] $file_level_error_rollups file_level_error_rollups
     *
     * @return $this
     */
    public function setFileLevelErrorRollups($file_level_error_rollups)
    {
        $this->container['file_level_error_rollups'] = $file_level_error_rollups;

        return $this;
    }

    /**
     * Gets user_level_error_rollups
     *
     * @return \DocuSign\Admin\Model\OrganizationImportResponseErrorRollup[]
     */
    public function getUserLevelErrorRollups()
    {
        return $this->container['user_level_error_rollups'];
    }

    /**
     * Sets user_level_error_rollups
     *
     * @param \DocuSign\Admin\Model\OrganizationImportResponseErrorRollup[] $user_level_error_rollups user_level_error_rollups
     *
     * @return $this
     */
    public function setUserLevelErrorRollups($user_level_error_rollups)
    {
        $this->container['user_level_error_rollups'] = $user_level_error_rollups;

        return $this;
    }

    /**
     * Gets user_level_warning_rollups
     *
     * @return \DocuSign\Admin\Model\OrganizationImportResponseWarningRollup[]
     */
    public function getUserLevelWarningRollups()
    {
        return $this->container['user_level_warning_rollups'];
    }

    /**
     * Sets user_level_warning_rollups
     *
     * @param \DocuSign\Admin\Model\OrganizationImportResponseWarningRollup[] $user_level_warning_rollups user_level_warning_rollups
     *
     * @return $this
     */
    public function setUserLevelWarningRollups($user_level_warning_rollups)
    {
        $this->container['user_level_warning_rollups'] = $user_level_warning_rollups;

        return $this;
    }

    /**
     * Gets has_csv_results
     *
     * @return ?bool
     */
    public function getHasCsvResults()
    {
        return $this->container['has_csv_results'];
    }

    /**
     * Sets has_csv_results
     *
     * @param ?bool $has_csv_results has_csv_results
     *
     * @return $this
     */
    public function setHasCsvResults($has_csv_results)
    {
        $this->container['has_csv_results'] = $has_csv_results;

        return $this;
    }

    /**
     * Gets results_uri
     *
     * @return ?string
     */
    public function getResultsUri()
    {
        return $this->container['results_uri'];
    }

    /**
     * Sets results_uri
     *
     * @param ?string $results_uri results_uri
     *
     * @return $this
     */
    public function setResultsUri($results_uri)
    {
        $this->container['results_uri'] = $results_uri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

