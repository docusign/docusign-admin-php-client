<?php
/**
 * OrganizationExportResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Model;

use \ArrayAccess;
use DocuSign\Admin\ObjectSerializer;

/**
 * OrganizationExportResponse Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Admin
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrganizationExportResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationExportResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '?string',
        'type' => '?string',
        'requestor' => '\DocuSign\Admin\Model\OrganizationExportRequestorResponse',
        'created' => '\DateTime',
        'last_modified' => '\DateTime',
        'completed' => '\DateTime',
        'expires' => '\DateTime',
        'status' => '?string',
        'selected_accounts' => '\DocuSign\Admin\Model\OrgExportSelectedAccount[]',
        'selected_domains' => '\DocuSign\Admin\Model\OrgExportSelectedDomain[]',
        'metadata_url' => '?string',
        'percent_completed' => '?int',
        'number_rows' => 'int',
        'size_bytes' => 'int',
        'results' => '\DocuSign\Admin\Model\OrganizationExportTaskResponse[]',
        'success' => '?bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'type' => null,
        'requestor' => null,
        'created' => 'date-time',
        'last_modified' => 'date-time',
        'completed' => 'date-time',
        'expires' => 'date-time',
        'status' => null,
        'selected_accounts' => null,
        'selected_domains' => null,
        'metadata_url' => null,
        'percent_completed' => 'int32',
        'number_rows' => 'int64',
        'size_bytes' => 'int64',
        'results' => null,
        'success' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'requestor' => 'requestor',
        'created' => 'created',
        'last_modified' => 'last_modified',
        'completed' => 'completed',
        'expires' => 'expires',
        'status' => 'status',
        'selected_accounts' => 'selected_accounts',
        'selected_domains' => 'selected_domains',
        'metadata_url' => 'metadata_url',
        'percent_completed' => 'percent_completed',
        'number_rows' => 'number_rows',
        'size_bytes' => 'size_bytes',
        'results' => 'results',
        'success' => 'success'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'requestor' => 'setRequestor',
        'created' => 'setCreated',
        'last_modified' => 'setLastModified',
        'completed' => 'setCompleted',
        'expires' => 'setExpires',
        'status' => 'setStatus',
        'selected_accounts' => 'setSelectedAccounts',
        'selected_domains' => 'setSelectedDomains',
        'metadata_url' => 'setMetadataUrl',
        'percent_completed' => 'setPercentCompleted',
        'number_rows' => 'setNumberRows',
        'size_bytes' => 'setSizeBytes',
        'results' => 'setResults',
        'success' => 'setSuccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'requestor' => 'getRequestor',
        'created' => 'getCreated',
        'last_modified' => 'getLastModified',
        'completed' => 'getCompleted',
        'expires' => 'getExpires',
        'status' => 'getStatus',
        'selected_accounts' => 'getSelectedAccounts',
        'selected_domains' => 'getSelectedDomains',
        'metadata_url' => 'getMetadataUrl',
        'percent_completed' => 'getPercentCompleted',
        'number_rows' => 'getNumberRows',
        'size_bytes' => 'getSizeBytes',
        'results' => 'getResults',
        'success' => 'getSuccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['requestor'] = isset($data['requestor']) ? $data['requestor'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['last_modified'] = isset($data['last_modified']) ? $data['last_modified'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['expires'] = isset($data['expires']) ? $data['expires'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['selected_accounts'] = isset($data['selected_accounts']) ? $data['selected_accounts'] : null;
        $this->container['selected_domains'] = isset($data['selected_domains']) ? $data['selected_domains'] : null;
        $this->container['metadata_url'] = isset($data['metadata_url']) ? $data['metadata_url'] : null;
        $this->container['percent_completed'] = isset($data['percent_completed']) ? $data['percent_completed'] : null;
        $this->container['number_rows'] = isset($data['number_rows']) ? $data['number_rows'] : null;
        $this->container['size_bytes'] = isset($data['size_bytes']) ? $data['size_bytes'] : null;
        $this->container['results'] = isset($data['results']) ? $data['results'] : null;
        $this->container['success'] = isset($data['success']) ? $data['success'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return ?string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param ?string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return ?string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param ?string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets requestor
     *
     * @return \DocuSign\Admin\Model\OrganizationExportRequestorResponse
     */
    public function getRequestor()
    {
        return $this->container['requestor'];
    }

    /**
     * Sets requestor
     *
     * @param \DocuSign\Admin\Model\OrganizationExportRequestorResponse $requestor requestor
     *
     * @return $this
     */
    public function setRequestor($requestor)
    {
        $this->container['requestor'] = $requestor;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets last_modified
     *
     * @return \DateTime
     */
    public function getLastModified()
    {
        return $this->container['last_modified'];
    }

    /**
     * Sets last_modified
     *
     * @param \DateTime $last_modified last_modified
     *
     * @return $this
     */
    public function setLastModified($last_modified)
    {
        $this->container['last_modified'] = $last_modified;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return \DateTime
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param \DateTime $completed completed
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets expires
     *
     * @return \DateTime
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     *
     * @param \DateTime $expires expires
     *
     * @return $this
     */
    public function setExpires($expires)
    {
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets status
     *
     * @return ?string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param ?string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets selected_accounts
     *
     * @return \DocuSign\Admin\Model\OrgExportSelectedAccount[]
     */
    public function getSelectedAccounts()
    {
        return $this->container['selected_accounts'];
    }

    /**
     * Sets selected_accounts
     *
     * @param \DocuSign\Admin\Model\OrgExportSelectedAccount[] $selected_accounts selected_accounts
     *
     * @return $this
     */
    public function setSelectedAccounts($selected_accounts)
    {
        $this->container['selected_accounts'] = $selected_accounts;

        return $this;
    }

    /**
     * Gets selected_domains
     *
     * @return \DocuSign\Admin\Model\OrgExportSelectedDomain[]
     */
    public function getSelectedDomains()
    {
        return $this->container['selected_domains'];
    }

    /**
     * Sets selected_domains
     *
     * @param \DocuSign\Admin\Model\OrgExportSelectedDomain[] $selected_domains selected_domains
     *
     * @return $this
     */
    public function setSelectedDomains($selected_domains)
    {
        $this->container['selected_domains'] = $selected_domains;

        return $this;
    }

    /**
     * Gets metadata_url
     *
     * @return ?string
     */
    public function getMetadataUrl()
    {
        return $this->container['metadata_url'];
    }

    /**
     * Sets metadata_url
     *
     * @param ?string $metadata_url metadata_url
     *
     * @return $this
     */
    public function setMetadataUrl($metadata_url)
    {
        $this->container['metadata_url'] = $metadata_url;

        return $this;
    }

    /**
     * Gets percent_completed
     *
     * @return ?int
     */
    public function getPercentCompleted()
    {
        return $this->container['percent_completed'];
    }

    /**
     * Sets percent_completed
     *
     * @param ?int $percent_completed percent_completed
     *
     * @return $this
     */
    public function setPercentCompleted($percent_completed)
    {
        $this->container['percent_completed'] = $percent_completed;

        return $this;
    }

    /**
     * Gets number_rows
     *
     * @return int
     */
    public function getNumberRows()
    {
        return $this->container['number_rows'];
    }

    /**
     * Sets number_rows
     *
     * @param int $number_rows number_rows
     *
     * @return $this
     */
    public function setNumberRows($number_rows)
    {
        $this->container['number_rows'] = $number_rows;

        return $this;
    }

    /**
     * Gets size_bytes
     *
     * @return int
     */
    public function getSizeBytes()
    {
        return $this->container['size_bytes'];
    }

    /**
     * Sets size_bytes
     *
     * @param int $size_bytes size_bytes
     *
     * @return $this
     */
    public function setSizeBytes($size_bytes)
    {
        $this->container['size_bytes'] = $size_bytes;

        return $this;
    }

    /**
     * Gets results
     *
     * @return \DocuSign\Admin\Model\OrganizationExportTaskResponse[]
     */
    public function getResults()
    {
        return $this->container['results'];
    }

    /**
     * Sets results
     *
     * @param \DocuSign\Admin\Model\OrganizationExportTaskResponse[] $results results
     *
     * @return $this
     */
    public function setResults($results)
    {
        $this->container['results'] = $results;

        return $this;
    }

    /**
     * Gets success
     *
     * @return ?bool
     */
    public function getSuccess()
    {
        return $this->container['success'];
    }

    /**
     * Sets success
     *
     * @param ?bool $success success
     *
     * @return $this
     */
    public function setSuccess($success)
    {
        $this->container['success'] = $success;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

