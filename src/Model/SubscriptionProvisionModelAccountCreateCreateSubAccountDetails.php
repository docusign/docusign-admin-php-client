<?php
/**
 * SubscriptionProvisionModelAccountCreateCreateSubAccountDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The Docusign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Model;

use \ArrayAccess;
use DocuSign\Admin\ObjectSerializer;

/**
 * SubscriptionProvisionModelAccountCreateCreateSubAccountDetails Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Admin
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The Docusign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SubscriptionProvisionModelAccountCreateCreateSubAccountDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Subscription.Provision.Model.Account.Create.CreateSubAccountDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'subscription_details' => '\DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateCreateAccountSubscriptionDetails',
        'name' => '?string',
        'country_code' => '?string',
        'region' => '?string',
        'site' => '?string',
        'address' => '\DocuSign\Admin\Model\DocuSignAccountDomainModelAddress',
        'admin_user' => '\DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateAccountAdmin',
        'billing_profile_type' => '?int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'subscription_details' => null,
        'name' => null,
        'country_code' => null,
        'region' => null,
        'site' => null,
        'address' => null,
        'admin_user' => null,
        'billing_profile_type' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscription_details' => 'SubscriptionDetails',
        'name' => 'Name',
        'country_code' => 'CountryCode',
        'region' => 'Region',
        'site' => 'Site',
        'address' => 'Address',
        'admin_user' => 'AdminUser',
        'billing_profile_type' => 'BillingProfileType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscription_details' => 'setSubscriptionDetails',
        'name' => 'setName',
        'country_code' => 'setCountryCode',
        'region' => 'setRegion',
        'site' => 'setSite',
        'address' => 'setAddress',
        'admin_user' => 'setAdminUser',
        'billing_profile_type' => 'setBillingProfileType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscription_details' => 'getSubscriptionDetails',
        'name' => 'getName',
        'country_code' => 'getCountryCode',
        'region' => 'getRegion',
        'site' => 'getSite',
        'address' => 'getAddress',
        'admin_user' => 'getAdminUser',
        'billing_profile_type' => 'getBillingProfileType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BILLING_PROFILE_TYPE__0 = '0';
    const BILLING_PROFILE_TYPE__1 = '1';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBillingProfileTypeAllowableValues()
    {
        return [
            self::BILLING_PROFILE_TYPE__0,
            self::BILLING_PROFILE_TYPE__1,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subscription_details'] = isset($data['subscription_details']) ? $data['subscription_details'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
        $this->container['site'] = isset($data['site']) ? $data['site'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['admin_user'] = isset($data['admin_user']) ? $data['admin_user'] : null;
        $this->container['billing_profile_type'] = isset($data['billing_profile_type']) ? $data['billing_profile_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBillingProfileTypeAllowableValues();
        if (!is_null($this->container['billing_profile_type']) && !in_array($this->container['billing_profile_type'], $allowedValues, false)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'billing_profile_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscription_details
     *
     * @return \DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateCreateAccountSubscriptionDetails
     */
    public function getSubscriptionDetails()
    {
        return $this->container['subscription_details'];
    }

    /**
     * Sets subscription_details
     *
     * @param \DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateCreateAccountSubscriptionDetails $subscription_details subscription_details
     *
     * @return $this
     */
    public function setSubscriptionDetails($subscription_details)
    {
        $this->container['subscription_details'] = $subscription_details;

        return $this;
    }

    /**
     * Gets name
     *
     * @return ?string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param ?string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return ?string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param ?string $country_code country_code
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets region
     *
     * @return ?string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param ?string $region region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets site
     *
     * @return ?string
     */
    public function getSite()
    {
        return $this->container['site'];
    }

    /**
     * Sets site
     *
     * @param ?string $site site
     *
     * @return $this
     */
    public function setSite($site)
    {
        $this->container['site'] = $site;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \DocuSign\Admin\Model\DocuSignAccountDomainModelAddress
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \DocuSign\Admin\Model\DocuSignAccountDomainModelAddress $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets admin_user
     *
     * @return \DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateAccountAdmin
     */
    public function getAdminUser()
    {
        return $this->container['admin_user'];
    }

    /**
     * Sets admin_user
     *
     * @param \DocuSign\Admin\Model\SubscriptionProvisionModelAccountCreateAccountAdmin $admin_user admin_user
     *
     * @return $this
     */
    public function setAdminUser($admin_user)
    {
        $this->container['admin_user'] = $admin_user;

        return $this;
    }

    /**
     * Gets billing_profile_type
     *
     * @return ?int
     */
    public function getBillingProfileType()
    {
        return $this->container['billing_profile_type'];
    }

    /**
     * Sets billing_profile_type
     *
     * @param ?int $billing_profile_type 0 stands for Web, 1 stands for Direct
     *
     * @return $this
     */
    public function setBillingProfileType($billing_profile_type)
    {
        $allowedValues = $this->getBillingProfileTypeAllowableValues();
        if (!is_null($billing_profile_type) && !in_array($billing_profile_type, $allowedValues, false)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'billing_profile_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['billing_profile_type'] = $billing_profile_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

