<?php
/**
 * OrganizationResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Model;

use \ArrayAccess;
use DocuSign\Admin\ObjectSerializer;

/**
 * OrganizationResponse Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Admin
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrganizationResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => '?string',
        'name' => '?string',
        'description' => '?string',
        'default_account_id' => '?string',
        'default_permission_profile_id' => 'int',
        'created_on' => '\DateTime',
        'created_by' => '?string',
        'last_modified_on' => '\DateTime',
        'last_modified_by' => '?string',
        'accounts' => '\DocuSign\Admin\Model\OrganizationAccountResponse[]',
        'users' => '\DocuSign\Admin\Model\OrganizationSimpleIdObject[]',
        'reserved_domains' => '\DocuSign\Admin\Model\DomainResponse[]',
        'identity_providers' => '\DocuSign\Admin\Model\IdentityProvidersResponse[]',
        'links' => '\DocuSign\Admin\Model\LinkResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'name' => null,
        'description' => null,
        'default_account_id' => 'uuid',
        'default_permission_profile_id' => 'int64',
        'created_on' => 'date-time',
        'created_by' => 'uuid',
        'last_modified_on' => 'date-time',
        'last_modified_by' => 'uuid',
        'accounts' => null,
        'users' => null,
        'reserved_domains' => null,
        'identity_providers' => null,
        'links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'default_account_id' => 'default_account_id',
        'default_permission_profile_id' => 'default_permission_profile_id',
        'created_on' => 'created_on',
        'created_by' => 'created_by',
        'last_modified_on' => 'last_modified_on',
        'last_modified_by' => 'last_modified_by',
        'accounts' => 'accounts',
        'users' => 'users',
        'reserved_domains' => 'reserved_domains',
        'identity_providers' => 'identity_providers',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'default_account_id' => 'setDefaultAccountId',
        'default_permission_profile_id' => 'setDefaultPermissionProfileId',
        'created_on' => 'setCreatedOn',
        'created_by' => 'setCreatedBy',
        'last_modified_on' => 'setLastModifiedOn',
        'last_modified_by' => 'setLastModifiedBy',
        'accounts' => 'setAccounts',
        'users' => 'setUsers',
        'reserved_domains' => 'setReservedDomains',
        'identity_providers' => 'setIdentityProviders',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'default_account_id' => 'getDefaultAccountId',
        'default_permission_profile_id' => 'getDefaultPermissionProfileId',
        'created_on' => 'getCreatedOn',
        'created_by' => 'getCreatedBy',
        'last_modified_on' => 'getLastModifiedOn',
        'last_modified_by' => 'getLastModifiedBy',
        'accounts' => 'getAccounts',
        'users' => 'getUsers',
        'reserved_domains' => 'getReservedDomains',
        'identity_providers' => 'getIdentityProviders',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['default_account_id'] = isset($data['default_account_id']) ? $data['default_account_id'] : null;
        $this->container['default_permission_profile_id'] = isset($data['default_permission_profile_id']) ? $data['default_permission_profile_id'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['last_modified_on'] = isset($data['last_modified_on']) ? $data['last_modified_on'] : null;
        $this->container['last_modified_by'] = isset($data['last_modified_by']) ? $data['last_modified_by'] : null;
        $this->container['accounts'] = isset($data['accounts']) ? $data['accounts'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['reserved_domains'] = isset($data['reserved_domains']) ? $data['reserved_domains'] : null;
        $this->container['identity_providers'] = isset($data['identity_providers']) ? $data['identity_providers'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return ?string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param ?string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return ?string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param ?string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return ?string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param ?string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets default_account_id
     *
     * @return ?string
     */
    public function getDefaultAccountId()
    {
        return $this->container['default_account_id'];
    }

    /**
     * Sets default_account_id
     *
     * @param ?string $default_account_id default_account_id
     *
     * @return $this
     */
    public function setDefaultAccountId($default_account_id)
    {
        $this->container['default_account_id'] = $default_account_id;

        return $this;
    }

    /**
     * Gets default_permission_profile_id
     *
     * @return int
     */
    public function getDefaultPermissionProfileId()
    {
        return $this->container['default_permission_profile_id'];
    }

    /**
     * Sets default_permission_profile_id
     *
     * @param int $default_permission_profile_id default_permission_profile_id
     *
     * @return $this
     */
    public function setDefaultPermissionProfileId($default_permission_profile_id)
    {
        $this->container['default_permission_profile_id'] = $default_permission_profile_id;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on created_on
     *
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return ?string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param ?string $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets last_modified_on
     *
     * @return \DateTime
     */
    public function getLastModifiedOn()
    {
        return $this->container['last_modified_on'];
    }

    /**
     * Sets last_modified_on
     *
     * @param \DateTime $last_modified_on last_modified_on
     *
     * @return $this
     */
    public function setLastModifiedOn($last_modified_on)
    {
        $this->container['last_modified_on'] = $last_modified_on;

        return $this;
    }

    /**
     * Gets last_modified_by
     *
     * @return ?string
     */
    public function getLastModifiedBy()
    {
        return $this->container['last_modified_by'];
    }

    /**
     * Sets last_modified_by
     *
     * @param ?string $last_modified_by last_modified_by
     *
     * @return $this
     */
    public function setLastModifiedBy($last_modified_by)
    {
        $this->container['last_modified_by'] = $last_modified_by;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \DocuSign\Admin\Model\OrganizationAccountResponse[]
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \DocuSign\Admin\Model\OrganizationAccountResponse[] $accounts accounts
     *
     * @return $this
     */
    public function setAccounts($accounts)
    {
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets users
     *
     * @return \DocuSign\Admin\Model\OrganizationSimpleIdObject[]
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param \DocuSign\Admin\Model\OrganizationSimpleIdObject[] $users users
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets reserved_domains
     *
     * @return \DocuSign\Admin\Model\DomainResponse[]
     */
    public function getReservedDomains()
    {
        return $this->container['reserved_domains'];
    }

    /**
     * Sets reserved_domains
     *
     * @param \DocuSign\Admin\Model\DomainResponse[] $reserved_domains reserved_domains
     *
     * @return $this
     */
    public function setReservedDomains($reserved_domains)
    {
        $this->container['reserved_domains'] = $reserved_domains;

        return $this;
    }

    /**
     * Gets identity_providers
     *
     * @return \DocuSign\Admin\Model\IdentityProvidersResponse[]
     */
    public function getIdentityProviders()
    {
        return $this->container['identity_providers'];
    }

    /**
     * Sets identity_providers
     *
     * @param \DocuSign\Admin\Model\IdentityProvidersResponse[] $identity_providers identity_providers
     *
     * @return $this
     */
    public function setIdentityProviders($identity_providers)
    {
        $this->container['identity_providers'] = $identity_providers;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \DocuSign\Admin\Model\LinkResponse[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \DocuSign\Admin\Model\LinkResponse[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

