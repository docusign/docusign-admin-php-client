<?php
/**
 * OrgReportConfigurationResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Model;

use \ArrayAccess;
use DocuSign\Admin\ObjectSerializer;

/**
 * OrgReportConfigurationResponse Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Admin
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrgReportConfigurationResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrgReportConfigurationResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_account_limit_disabled' => '?bool',
        'custom_dates_enabled' => '?bool',
        'enabled_report_types' => '?int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_account_limit_disabled' => null,
        'custom_dates_enabled' => null,
        'enabled_report_types' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_account_limit_disabled' => 'is_account_limit_disabled',
        'custom_dates_enabled' => 'custom_dates_enabled',
        'enabled_report_types' => 'enabled_report_types'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_account_limit_disabled' => 'setIsAccountLimitDisabled',
        'custom_dates_enabled' => 'setCustomDatesEnabled',
        'enabled_report_types' => 'setEnabledReportTypes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_account_limit_disabled' => 'getIsAccountLimitDisabled',
        'custom_dates_enabled' => 'getCustomDatesEnabled',
        'enabled_report_types' => 'getEnabledReportTypes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_account_limit_disabled'] = isset($data['is_account_limit_disabled']) ? $data['is_account_limit_disabled'] : null;
        $this->container['custom_dates_enabled'] = isset($data['custom_dates_enabled']) ? $data['custom_dates_enabled'] : null;
        $this->container['enabled_report_types'] = isset($data['enabled_report_types']) ? $data['enabled_report_types'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_account_limit_disabled
     *
     * @return ?bool
     */
    public function getIsAccountLimitDisabled()
    {
        return $this->container['is_account_limit_disabled'];
    }

    /**
     * Sets is_account_limit_disabled
     *
     * @param ?bool $is_account_limit_disabled is_account_limit_disabled
     *
     * @return $this
     */
    public function setIsAccountLimitDisabled($is_account_limit_disabled)
    {
        $this->container['is_account_limit_disabled'] = $is_account_limit_disabled;

        return $this;
    }

    /**
     * Gets custom_dates_enabled
     *
     * @return ?bool
     */
    public function getCustomDatesEnabled()
    {
        return $this->container['custom_dates_enabled'];
    }

    /**
     * Sets custom_dates_enabled
     *
     * @param ?bool $custom_dates_enabled custom_dates_enabled
     *
     * @return $this
     */
    public function setCustomDatesEnabled($custom_dates_enabled)
    {
        $this->container['custom_dates_enabled'] = $custom_dates_enabled;

        return $this;
    }

    /**
     * Gets enabled_report_types
     *
     * @return ?int[]
     */
    public function getEnabledReportTypes()
    {
        return $this->container['enabled_report_types'];
    }

    /**
     * Sets enabled_report_types
     *
     * @param ?int[] $enabled_report_types enabled_report_types
     *
     * @return $this
     */
    public function setEnabledReportTypes($enabled_report_types)
    {
        $this->container['enabled_report_types'] = $enabled_report_types;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

