<?php
/**
 * NewAccountUserRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Model;

use \ArrayAccess;
use DocuSign\Admin\ObjectSerializer;

/**
 * NewAccountUserRequest Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Admin
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class NewAccountUserRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NewAccountUserRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'permission_profile' => '\DocuSign\Admin\Model\PermissionProfileRequest',
        'groups' => '\DocuSign\Admin\Model\GroupRequest[]',
        'user_name' => '?string',
        'first_name' => '?string',
        'last_name' => '?string',
        'email' => '?string',
        'default_account_id' => '?string',
        'language_culture' => '?string',
        'selected_languages' => '?string',
        'access_code' => '?string',
        'federated_status' => '?string',
        'auto_activate_memberships' => '?bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'permission_profile' => null,
        'groups' => null,
        'user_name' => null,
        'first_name' => null,
        'last_name' => null,
        'email' => null,
        'default_account_id' => 'uuid',
        'language_culture' => null,
        'selected_languages' => null,
        'access_code' => null,
        'federated_status' => null,
        'auto_activate_memberships' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'permission_profile' => 'permission_profile',
        'groups' => 'groups',
        'user_name' => 'user_name',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'email' => 'email',
        'default_account_id' => 'default_account_id',
        'language_culture' => 'language_culture',
        'selected_languages' => 'selected_languages',
        'access_code' => 'access_code',
        'federated_status' => 'federated_status',
        'auto_activate_memberships' => 'auto_activate_memberships'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'permission_profile' => 'setPermissionProfile',
        'groups' => 'setGroups',
        'user_name' => 'setUserName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'default_account_id' => 'setDefaultAccountId',
        'language_culture' => 'setLanguageCulture',
        'selected_languages' => 'setSelectedLanguages',
        'access_code' => 'setAccessCode',
        'federated_status' => 'setFederatedStatus',
        'auto_activate_memberships' => 'setAutoActivateMemberships'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'permission_profile' => 'getPermissionProfile',
        'groups' => 'getGroups',
        'user_name' => 'getUserName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'default_account_id' => 'getDefaultAccountId',
        'language_culture' => 'getLanguageCulture',
        'selected_languages' => 'getSelectedLanguages',
        'access_code' => 'getAccessCode',
        'federated_status' => 'getFederatedStatus',
        'auto_activate_memberships' => 'getAutoActivateMemberships'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['permission_profile'] = isset($data['permission_profile']) ? $data['permission_profile'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['default_account_id'] = isset($data['default_account_id']) ? $data['default_account_id'] : null;
        $this->container['language_culture'] = isset($data['language_culture']) ? $data['language_culture'] : null;
        $this->container['selected_languages'] = isset($data['selected_languages']) ? $data['selected_languages'] : null;
        $this->container['access_code'] = isset($data['access_code']) ? $data['access_code'] : null;
        $this->container['federated_status'] = isset($data['federated_status']) ? $data['federated_status'] : null;
        $this->container['auto_activate_memberships'] = isset($data['auto_activate_memberships']) ? $data['auto_activate_memberships'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets permission_profile
     *
     * @return \DocuSign\Admin\Model\PermissionProfileRequest
     */
    public function getPermissionProfile()
    {
        return $this->container['permission_profile'];
    }

    /**
     * Sets permission_profile
     *
     * @param \DocuSign\Admin\Model\PermissionProfileRequest $permission_profile permission_profile
     *
     * @return $this
     */
    public function setPermissionProfile($permission_profile)
    {
        $this->container['permission_profile'] = $permission_profile;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \DocuSign\Admin\Model\GroupRequest[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \DocuSign\Admin\Model\GroupRequest[] $groups groups
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return ?string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param ?string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return ?string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param ?string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return ?string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param ?string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return ?string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param ?string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets default_account_id
     *
     * @return ?string
     */
    public function getDefaultAccountId()
    {
        return $this->container['default_account_id'];
    }

    /**
     * Sets default_account_id
     *
     * @param ?string $default_account_id default_account_id
     *
     * @return $this
     */
    public function setDefaultAccountId($default_account_id)
    {
        $this->container['default_account_id'] = $default_account_id;

        return $this;
    }

    /**
     * Gets language_culture
     *
     * @return ?string
     */
    public function getLanguageCulture()
    {
        return $this->container['language_culture'];
    }

    /**
     * Sets language_culture
     *
     * @param ?string $language_culture language_culture
     *
     * @return $this
     */
    public function setLanguageCulture($language_culture)
    {
        $this->container['language_culture'] = $language_culture;

        return $this;
    }

    /**
     * Gets selected_languages
     *
     * @return ?string
     */
    public function getSelectedLanguages()
    {
        return $this->container['selected_languages'];
    }

    /**
     * Sets selected_languages
     *
     * @param ?string $selected_languages selected_languages
     *
     * @return $this
     */
    public function setSelectedLanguages($selected_languages)
    {
        $this->container['selected_languages'] = $selected_languages;

        return $this;
    }

    /**
     * Gets access_code
     *
     * @return ?string
     */
    public function getAccessCode()
    {
        return $this->container['access_code'];
    }

    /**
     * Sets access_code
     *
     * @param ?string $access_code access_code
     *
     * @return $this
     */
    public function setAccessCode($access_code)
    {
        $this->container['access_code'] = $access_code;

        return $this;
    }

    /**
     * Gets federated_status
     *
     * @return ?string
     */
    public function getFederatedStatus()
    {
        return $this->container['federated_status'];
    }

    /**
     * Sets federated_status
     *
     * @param ?string $federated_status federated_status
     *
     * @return $this
     */
    public function setFederatedStatus($federated_status)
    {
        $this->container['federated_status'] = $federated_status;

        return $this;
    }

    /**
     * Gets auto_activate_memberships
     *
     * @return ?bool
     */
    public function getAutoActivateMemberships()
    {
        return $this->container['auto_activate_memberships'];
    }

    /**
     * Sets auto_activate_memberships
     *
     * @param ?bool $auto_activate_memberships auto_activate_memberships
     *
     * @return $this
     */
    public function setAutoActivateMemberships($auto_activate_memberships)
    {
        $this->container['auto_activate_memberships'] = $auto_activate_memberships;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

