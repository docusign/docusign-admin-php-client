<?php
/**
 * OrganizationSubscriptionResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The Docusign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Model;

use \ArrayAccess;
use DocuSign\Admin\ObjectSerializer;

/**
 * OrganizationSubscriptionResponse Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Admin
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The Docusign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrganizationSubscriptionResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationSubscriptionResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'plan_id' => '?string',
        'plan_name' => '?string',
        'associated_accounts_count' => '?int',
        'asset_group_name' => '?string',
        'asset_group_id' => '?string',
        'subscription_name' => '?string',
        'subscription_id' => '?string',
        'modules' => '\DocuSign\Admin\Model\SubscriptionPlanItemResponse[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'plan_id' => 'uuid',
        'plan_name' => null,
        'associated_accounts_count' => 'int32',
        'asset_group_name' => null,
        'asset_group_id' => 'uuid',
        'subscription_name' => null,
        'subscription_id' => null,
        'modules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plan_id' => 'plan_id',
        'plan_name' => 'plan_name',
        'associated_accounts_count' => 'associated_accounts_count',
        'asset_group_name' => 'asset_group_name',
        'asset_group_id' => 'asset_group_id',
        'subscription_name' => 'subscription_name',
        'subscription_id' => 'subscription_id',
        'modules' => 'modules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plan_id' => 'setPlanId',
        'plan_name' => 'setPlanName',
        'associated_accounts_count' => 'setAssociatedAccountsCount',
        'asset_group_name' => 'setAssetGroupName',
        'asset_group_id' => 'setAssetGroupId',
        'subscription_name' => 'setSubscriptionName',
        'subscription_id' => 'setSubscriptionId',
        'modules' => 'setModules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plan_id' => 'getPlanId',
        'plan_name' => 'getPlanName',
        'associated_accounts_count' => 'getAssociatedAccountsCount',
        'asset_group_name' => 'getAssetGroupName',
        'asset_group_id' => 'getAssetGroupId',
        'subscription_name' => 'getSubscriptionName',
        'subscription_id' => 'getSubscriptionId',
        'modules' => 'getModules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plan_id'] = isset($data['plan_id']) ? $data['plan_id'] : null;
        $this->container['plan_name'] = isset($data['plan_name']) ? $data['plan_name'] : null;
        $this->container['associated_accounts_count'] = isset($data['associated_accounts_count']) ? $data['associated_accounts_count'] : null;
        $this->container['asset_group_name'] = isset($data['asset_group_name']) ? $data['asset_group_name'] : null;
        $this->container['asset_group_id'] = isset($data['asset_group_id']) ? $data['asset_group_id'] : null;
        $this->container['subscription_name'] = isset($data['subscription_name']) ? $data['subscription_name'] : null;
        $this->container['subscription_id'] = isset($data['subscription_id']) ? $data['subscription_id'] : null;
        $this->container['modules'] = isset($data['modules']) ? $data['modules'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plan_id
     *
     * @return ?string
     */
    public function getPlanId()
    {
        return $this->container['plan_id'];
    }

    /**
     * Sets plan_id
     *
     * @param ?string $plan_id plan_id
     *
     * @return $this
     */
    public function setPlanId($plan_id)
    {
        $this->container['plan_id'] = $plan_id;

        return $this;
    }

    /**
     * Gets plan_name
     *
     * @return ?string
     */
    public function getPlanName()
    {
        return $this->container['plan_name'];
    }

    /**
     * Sets plan_name
     *
     * @param ?string $plan_name plan_name
     *
     * @return $this
     */
    public function setPlanName($plan_name)
    {
        $this->container['plan_name'] = $plan_name;

        return $this;
    }

    /**
     * Gets associated_accounts_count
     *
     * @return ?int
     */
    public function getAssociatedAccountsCount()
    {
        return $this->container['associated_accounts_count'];
    }

    /**
     * Sets associated_accounts_count
     *
     * @param ?int $associated_accounts_count associated_accounts_count
     *
     * @return $this
     */
    public function setAssociatedAccountsCount($associated_accounts_count)
    {
        $this->container['associated_accounts_count'] = $associated_accounts_count;

        return $this;
    }

    /**
     * Gets asset_group_name
     *
     * @return ?string
     */
    public function getAssetGroupName()
    {
        return $this->container['asset_group_name'];
    }

    /**
     * Sets asset_group_name
     *
     * @param ?string $asset_group_name asset_group_name
     *
     * @return $this
     */
    public function setAssetGroupName($asset_group_name)
    {
        $this->container['asset_group_name'] = $asset_group_name;

        return $this;
    }

    /**
     * Gets asset_group_id
     *
     * @return ?string
     */
    public function getAssetGroupId()
    {
        return $this->container['asset_group_id'];
    }

    /**
     * Sets asset_group_id
     *
     * @param ?string $asset_group_id asset_group_id
     *
     * @return $this
     */
    public function setAssetGroupId($asset_group_id)
    {
        $this->container['asset_group_id'] = $asset_group_id;

        return $this;
    }

    /**
     * Gets subscription_name
     *
     * @return ?string
     */
    public function getSubscriptionName()
    {
        return $this->container['subscription_name'];
    }

    /**
     * Sets subscription_name
     *
     * @param ?string $subscription_name subscription_name
     *
     * @return $this
     */
    public function setSubscriptionName($subscription_name)
    {
        $this->container['subscription_name'] = $subscription_name;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return ?string
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param ?string $subscription_id subscription_id
     *
     * @return $this
     */
    public function setSubscriptionId($subscription_id)
    {
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets modules
     *
     * @return \DocuSign\Admin\Model\SubscriptionPlanItemResponse[]
     */
    public function getModules()
    {
        return $this->container['modules'];
    }

    /**
     * Sets modules
     *
     * @param \DocuSign\Admin\Model\SubscriptionPlanItemResponse[] $modules modules
     *
     * @return $this
     */
    public function setModules($modules)
    {
        $this->container['modules'] = $modules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

