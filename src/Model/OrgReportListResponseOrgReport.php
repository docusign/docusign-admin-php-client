<?php
/**
 * OrgReportListResponseOrgReport
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Model;

use \ArrayAccess;
use DocuSign\Admin\ObjectSerializer;

/**
 * OrgReportListResponseOrgReport Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Admin
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrgReportListResponseOrgReport implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrgReportListResponse_OrgReport';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'complete' => '?bool',
        'report_correlation_id' => '?string',
        'site_id' => '?int',
        'report_id' => '?string',
        'requestor' => '\DocuSign\Admin\Model\OrgReportListResponseRequestor',
        'created_on' => '\DateTime',
        'account_export_count' => '?int',
        'url' => '?string',
        'report_type_id' => '?string',
        'report_date_range' => '?string',
        'custom_start_date' => '\DateTime',
        'custom_end_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'complete' => null,
        'report_correlation_id' => 'uuid',
        'site_id' => 'int32',
        'report_id' => 'uuid',
        'requestor' => null,
        'created_on' => 'date-time',
        'account_export_count' => 'int32',
        'url' => null,
        'report_type_id' => null,
        'report_date_range' => null,
        'custom_start_date' => 'date-time',
        'custom_end_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'complete' => 'complete',
        'report_correlation_id' => 'report_correlation_id',
        'site_id' => 'site_id',
        'report_id' => 'report_id',
        'requestor' => 'requestor',
        'created_on' => 'created_on',
        'account_export_count' => 'account_export_count',
        'url' => 'url',
        'report_type_id' => 'report_type_id',
        'report_date_range' => 'report_date_range',
        'custom_start_date' => 'custom_start_date',
        'custom_end_date' => 'custom_end_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'complete' => 'setComplete',
        'report_correlation_id' => 'setReportCorrelationId',
        'site_id' => 'setSiteId',
        'report_id' => 'setReportId',
        'requestor' => 'setRequestor',
        'created_on' => 'setCreatedOn',
        'account_export_count' => 'setAccountExportCount',
        'url' => 'setUrl',
        'report_type_id' => 'setReportTypeId',
        'report_date_range' => 'setReportDateRange',
        'custom_start_date' => 'setCustomStartDate',
        'custom_end_date' => 'setCustomEndDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'complete' => 'getComplete',
        'report_correlation_id' => 'getReportCorrelationId',
        'site_id' => 'getSiteId',
        'report_id' => 'getReportId',
        'requestor' => 'getRequestor',
        'created_on' => 'getCreatedOn',
        'account_export_count' => 'getAccountExportCount',
        'url' => 'getUrl',
        'report_type_id' => 'getReportTypeId',
        'report_date_range' => 'getReportDateRange',
        'custom_start_date' => 'getCustomStartDate',
        'custom_end_date' => 'getCustomEndDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
        $this->container['report_correlation_id'] = isset($data['report_correlation_id']) ? $data['report_correlation_id'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['report_id'] = isset($data['report_id']) ? $data['report_id'] : null;
        $this->container['requestor'] = isset($data['requestor']) ? $data['requestor'] : null;
        $this->container['created_on'] = isset($data['created_on']) ? $data['created_on'] : null;
        $this->container['account_export_count'] = isset($data['account_export_count']) ? $data['account_export_count'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['report_type_id'] = isset($data['report_type_id']) ? $data['report_type_id'] : null;
        $this->container['report_date_range'] = isset($data['report_date_range']) ? $data['report_date_range'] : null;
        $this->container['custom_start_date'] = isset($data['custom_start_date']) ? $data['custom_start_date'] : null;
        $this->container['custom_end_date'] = isset($data['custom_end_date']) ? $data['custom_end_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets complete
     *
     * @return ?bool
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     *
     * @param ?bool $complete complete
     *
     * @return $this
     */
    public function setComplete($complete)
    {
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets report_correlation_id
     *
     * @return ?string
     */
    public function getReportCorrelationId()
    {
        return $this->container['report_correlation_id'];
    }

    /**
     * Sets report_correlation_id
     *
     * @param ?string $report_correlation_id report_correlation_id
     *
     * @return $this
     */
    public function setReportCorrelationId($report_correlation_id)
    {
        $this->container['report_correlation_id'] = $report_correlation_id;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return ?int
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param ?int $site_id site_id
     *
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets report_id
     *
     * @return ?string
     */
    public function getReportId()
    {
        return $this->container['report_id'];
    }

    /**
     * Sets report_id
     *
     * @param ?string $report_id report_id
     *
     * @return $this
     */
    public function setReportId($report_id)
    {
        $this->container['report_id'] = $report_id;

        return $this;
    }

    /**
     * Gets requestor
     *
     * @return \DocuSign\Admin\Model\OrgReportListResponseRequestor
     */
    public function getRequestor()
    {
        return $this->container['requestor'];
    }

    /**
     * Sets requestor
     *
     * @param \DocuSign\Admin\Model\OrgReportListResponseRequestor $requestor requestor
     *
     * @return $this
     */
    public function setRequestor($requestor)
    {
        $this->container['requestor'] = $requestor;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on created_on
     *
     * @return $this
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets account_export_count
     *
     * @return ?int
     */
    public function getAccountExportCount()
    {
        return $this->container['account_export_count'];
    }

    /**
     * Sets account_export_count
     *
     * @param ?int $account_export_count account_export_count
     *
     * @return $this
     */
    public function setAccountExportCount($account_export_count)
    {
        $this->container['account_export_count'] = $account_export_count;

        return $this;
    }

    /**
     * Gets url
     *
     * @return ?string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param ?string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets report_type_id
     *
     * @return ?string
     */
    public function getReportTypeId()
    {
        return $this->container['report_type_id'];
    }

    /**
     * Sets report_type_id
     *
     * @param ?string $report_type_id report_type_id
     *
     * @return $this
     */
    public function setReportTypeId($report_type_id)
    {
        $this->container['report_type_id'] = $report_type_id;

        return $this;
    }

    /**
     * Gets report_date_range
     *
     * @return ?string
     */
    public function getReportDateRange()
    {
        return $this->container['report_date_range'];
    }

    /**
     * Sets report_date_range
     *
     * @param ?string $report_date_range report_date_range
     *
     * @return $this
     */
    public function setReportDateRange($report_date_range)
    {
        $this->container['report_date_range'] = $report_date_range;

        return $this;
    }

    /**
     * Gets custom_start_date
     *
     * @return \DateTime
     */
    public function getCustomStartDate()
    {
        return $this->container['custom_start_date'];
    }

    /**
     * Sets custom_start_date
     *
     * @param \DateTime $custom_start_date custom_start_date
     *
     * @return $this
     */
    public function setCustomStartDate($custom_start_date)
    {
        $this->container['custom_start_date'] = $custom_start_date;

        return $this;
    }

    /**
     * Gets custom_end_date
     *
     * @return \DateTime
     */
    public function getCustomEndDate()
    {
        return $this->container['custom_end_date'];
    }

    /**
     * Sets custom_end_date
     *
     * @param \DateTime $custom_end_date custom_end_date
     *
     * @return $this
     */
    public function setCustomEndDate($custom_end_date)
    {
        $this->container['custom_end_date'] = $custom_end_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

