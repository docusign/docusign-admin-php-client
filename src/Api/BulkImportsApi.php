<?php
declare(strict_types=1);

/**
 * BulkImportsApi.
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Api\BulkImportsApi;



namespace DocuSign\Admin\Api;

use DocuSign\Admin\Client\ApiClient;
use DocuSign\Admin\Client\ApiException;
use DocuSign\Admin\Configuration;
use DocuSign\Admin\ObjectSerializer;

/**
 * BulkImportsApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BulkImportsApi
{
    /**
     * API Client
     *
     * @var ApiClient instance of the ApiClient
     */
    protected ApiClient $apiClient;

    /**
     * Constructor
     *
     * @param ApiClient|null $apiClient The api client to use
     *
     * @return void
     */
    public function __construct(ApiClient $apiClient = null)
    {
        $this->apiClient = $apiClient ?? new ApiClient();
    }

    /**
     * Get API client
     *
     * @return ApiClient get the API client
     */
    public function getApiClient(): ApiClient
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param ApiClient $apiClient set the API client
     *
     * @return self
     */
    public function setApiClient(ApiClient $apiClient): self
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Update $resourcePath with $
    *
    * @param string $resourcePath the resource path to use
    * @param string $baseName the base name param
    * @param string $paramName the parameter name
    *
    * @return string
    */
    public function updateResourcePath(string $resourcePath, string $baseName, string $paramName): string
    {
        return str_replace(
            "{" . $baseName . "}",
            $this->apiClient->getSerializer()->toPathValue($paramName),
            $resourcePath
        );
    }


    /**
     * Operation addBulkAccountSettingsImport
     *
     * Creates a new account settings import request.
     *
     * @param ?string $organization_id The organization ID Guid
    * @param \SplFileObject $file_csv CSV file. (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse
     */
    public function addBulkAccountSettingsImport($organization_id, $file_csv)
    {
        list($response) = $this->addBulkAccountSettingsImportWithHttpInfo($organization_id, $file_csv);
        return $response;
    }

    /**
     * Operation addBulkAccountSettingsImportWithHttpInfo
     *
     * Creates a new account settings import request.
     *
     * @param ?string $organization_id The organization ID Guid
    * @param \SplFileObject $file_csv CSV file. (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addBulkAccountSettingsImportWithHttpInfo($organization_id, $file_csv): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling addBulkAccountSettingsImport');
        }
        // verify the required parameter 'file_csv' is set
        if ($file_csv === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_csv when calling addBulkAccountSettingsImport');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/account_settings";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($file_csv !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file.csv'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file_csv));
            } else {
                $formParams['file.csv'] = '@' . $this->apiClient->getSerializer()->toFormValue($file_csv);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse',
                '/v2/organizations/{organizationId}/imports/account_settings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBulkImportAddUsersRequest
     *
     * Import request for adding users to accounts within the organization.
     *
     * @param ?string $organization_id The organization ID Guid
    * @param \SplFileObject $file_csv CSV file. (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationImportResponse
     */
    public function createBulkImportAddUsersRequest($organization_id, $file_csv)
    {
        list($response) = $this->createBulkImportAddUsersRequestWithHttpInfo($organization_id, $file_csv);
        return $response;
    }

    /**
     * Operation createBulkImportAddUsersRequestWithHttpInfo
     *
     * Import request for adding users to accounts within the organization.
     *
     * @param ?string $organization_id The organization ID Guid
    * @param \SplFileObject $file_csv CSV file. (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBulkImportAddUsersRequestWithHttpInfo($organization_id, $file_csv): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling createBulkImportAddUsersRequest');
        }
        // verify the required parameter 'file_csv' is set
        if ($file_csv === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_csv when calling createBulkImportAddUsersRequest');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/bulk_users/add";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($file_csv !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file.csv'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file_csv));
            } else {
                $formParams['file.csv'] = '@' . $this->apiClient->getSerializer()->toFormValue($file_csv);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationImportResponse',
                '/v2/organizations/{organizationId}/imports/bulk_users/add'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationImportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationImportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBulkImportCloseUsersRequest
     *
     * Closes the Bulk User Import request
     *
     * @param ?string $organization_id The organization ID Guid
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationImportResponse
     */
    public function createBulkImportCloseUsersRequest($organization_id)
    {
        list($response) = $this->createBulkImportCloseUsersRequestWithHttpInfo($organization_id);
        return $response;
    }

    /**
     * Operation createBulkImportCloseUsersRequestWithHttpInfo
     *
     * Closes the Bulk User Import request
     *
     * @param ?string $organization_id The organization ID Guid
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBulkImportCloseUsersRequestWithHttpInfo($organization_id): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling createBulkImportCloseUsersRequest');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/bulk_users/close";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationImportResponse',
                '/v2/organizations/{organizationId}/imports/bulk_users/close'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationImportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationImportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBulkImportExternalCloseUsersRequest
     *
     * Closes memberships which are not in an account which is part of the organization, but which do have email addresses which are @ a verified reserved web domain which belongs to the organization
     *
     * @param ?string $organization_id The organization ID Guid
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationImportResponse
     */
    public function createBulkImportExternalCloseUsersRequest($organization_id)
    {
        list($response) = $this->createBulkImportExternalCloseUsersRequestWithHttpInfo($organization_id);
        return $response;
    }

    /**
     * Operation createBulkImportExternalCloseUsersRequestWithHttpInfo
     *
     * Closes memberships which are not in an account which is part of the organization, but which do have email addresses which are @ a verified reserved web domain which belongs to the organization
     *
     * @param ?string $organization_id The organization ID Guid
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBulkImportExternalCloseUsersRequestWithHttpInfo($organization_id): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling createBulkImportExternalCloseUsersRequest');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/bulk_users/close_external";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationImportResponse',
                '/v2/organizations/{organizationId}/imports/bulk_users/close_external'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationImportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationImportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBulkImportSingleAccountAddUsersRequest
     *
     * Import request for adding user to a single account within the organization. Allows upload of user information without requiring an AccountId column
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $account_id The account ID Guid
    * @param \SplFileObject $file_csv CSV file. (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationImportResponse
     */
    public function createBulkImportSingleAccountAddUsersRequest($organization_id, $account_id, $file_csv)
    {
        list($response) = $this->createBulkImportSingleAccountAddUsersRequestWithHttpInfo($organization_id, $account_id, $file_csv);
        return $response;
    }

    /**
     * Operation createBulkImportSingleAccountAddUsersRequestWithHttpInfo
     *
     * Import request for adding user to a single account within the organization. Allows upload of user information without requiring an AccountId column
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $account_id The account ID Guid
    * @param \SplFileObject $file_csv CSV file. (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBulkImportSingleAccountAddUsersRequestWithHttpInfo($organization_id, $account_id, $file_csv): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling createBulkImportSingleAccountAddUsersRequest');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createBulkImportSingleAccountAddUsersRequest');
        }
        // verify the required parameter 'file_csv' is set
        if ($file_csv === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_csv when calling createBulkImportSingleAccountAddUsersRequest');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/accounts/{accountId}/imports/bulk_users/add";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($file_csv !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file.csv'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file_csv));
            } else {
                $formParams['file.csv'] = '@' . $this->apiClient->getSerializer()->toFormValue($file_csv);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationImportResponse',
                '/v2/organizations/{organizationId}/accounts/{accountId}/imports/bulk_users/add'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationImportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationImportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBulkImportSingleAccountUpdateUsersRequest
     *
     * Import request for updating users for a single account within the organization. Allows upload of user information without requiring an AccountId column
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $account_id The account ID Guid
    * @param \SplFileObject $file_csv CSV file. (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationImportResponse
     */
    public function createBulkImportSingleAccountUpdateUsersRequest($organization_id, $account_id, $file_csv)
    {
        list($response) = $this->createBulkImportSingleAccountUpdateUsersRequestWithHttpInfo($organization_id, $account_id, $file_csv);
        return $response;
    }

    /**
     * Operation createBulkImportSingleAccountUpdateUsersRequestWithHttpInfo
     *
     * Import request for updating users for a single account within the organization. Allows upload of user information without requiring an AccountId column
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $account_id The account ID Guid
    * @param \SplFileObject $file_csv CSV file. (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBulkImportSingleAccountUpdateUsersRequestWithHttpInfo($organization_id, $account_id, $file_csv): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling createBulkImportSingleAccountUpdateUsersRequest');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createBulkImportSingleAccountUpdateUsersRequest');
        }
        // verify the required parameter 'file_csv' is set
        if ($file_csv === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_csv when calling createBulkImportSingleAccountUpdateUsersRequest');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/accounts/{accountId}/imports/bulk_users/update";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($file_csv !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file.csv'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file_csv));
            } else {
                $formParams['file.csv'] = '@' . $this->apiClient->getSerializer()->toFormValue($file_csv);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationImportResponse',
                '/v2/organizations/{organizationId}/accounts/{accountId}/imports/bulk_users/update'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationImportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationImportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBulkImportUpdateUsersRequest
     *
     * Import request for updating users to accounts within the organization.
     *
     * @param ?string $organization_id The organization ID Guid
    * @param \SplFileObject $file_csv CSV file. (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationImportResponse
     */
    public function createBulkImportUpdateUsersRequest($organization_id, $file_csv)
    {
        list($response) = $this->createBulkImportUpdateUsersRequestWithHttpInfo($organization_id, $file_csv);
        return $response;
    }

    /**
     * Operation createBulkImportUpdateUsersRequestWithHttpInfo
     *
     * Import request for updating users to accounts within the organization.
     *
     * @param ?string $organization_id The organization ID Guid
    * @param \SplFileObject $file_csv CSV file. (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBulkImportUpdateUsersRequestWithHttpInfo($organization_id, $file_csv): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling createBulkImportUpdateUsersRequest');
        }
        // verify the required parameter 'file_csv' is set
        if ($file_csv === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_csv when calling createBulkImportUpdateUsersRequest');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/bulk_users/update";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($file_csv !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file.csv'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file_csv));
            } else {
                $formParams['file.csv'] = '@' . $this->apiClient->getSerializer()->toFormValue($file_csv);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationImportResponse',
                '/v2/organizations/{organizationId}/imports/bulk_users/update'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationImportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationImportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBulkAccountSettingsImport
     *
     * Deletes a Bulk Account Settings Import request
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $import_id The import ID Guid for the request
     *
     * @throws ApiException on non-2xx response
     * @return object
     */
    public function deleteBulkAccountSettingsImport($organization_id, $import_id)
    {
        list($response) = $this->deleteBulkAccountSettingsImportWithHttpInfo($organization_id, $import_id);
        return $response;
    }

    /**
     * Operation deleteBulkAccountSettingsImportWithHttpInfo
     *
     * Deletes a Bulk Account Settings Import request
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $import_id The import ID Guid for the request
     *
     * @throws ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBulkAccountSettingsImportWithHttpInfo($organization_id, $import_id): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling deleteBulkAccountSettingsImport');
        }
        // verify the required parameter 'import_id' is set
        if ($import_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $import_id when calling deleteBulkAccountSettingsImport');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/account_settings/{importId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($import_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "importId", $import_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/v2/organizations/{organizationId}/imports/account_settings/{importId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteBulkUserImport
     *
     * Deletes a User Import request
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $import_id The import ID Guid for the request
     *
     * @throws ApiException on non-2xx response
     * @return object
     */
    public function deleteBulkUserImport($organization_id, $import_id)
    {
        list($response) = $this->deleteBulkUserImportWithHttpInfo($organization_id, $import_id);
        return $response;
    }

    /**
     * Operation deleteBulkUserImportWithHttpInfo
     *
     * Deletes a User Import request
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $import_id The import ID Guid for the request
     *
     * @throws ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteBulkUserImportWithHttpInfo($organization_id, $import_id): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling deleteBulkUserImport');
        }
        // verify the required parameter 'import_id' is set
        if ($import_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $import_id when calling deleteBulkUserImport');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/bulk_users/{importId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($import_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "importId", $import_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/v2/organizations/{organizationId}/imports/bulk_users/{importId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBulkAccountSettingsImport
     *
     * Returns the details/metadata for a Bulk Account Settings Import request
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $import_id The import ID Guid for the request
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse
     */
    public function getBulkAccountSettingsImport($organization_id, $import_id)
    {
        list($response) = $this->getBulkAccountSettingsImportWithHttpInfo($organization_id, $import_id);
        return $response;
    }

    /**
     * Operation getBulkAccountSettingsImportWithHttpInfo
     *
     * Returns the details/metadata for a Bulk Account Settings Import request
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $import_id The import ID Guid for the request
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBulkAccountSettingsImportWithHttpInfo($organization_id, $import_id): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getBulkAccountSettingsImport');
        }
        // verify the required parameter 'import_id' is set
        if ($import_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $import_id when calling getBulkAccountSettingsImport');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/account_settings/{importId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($import_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "importId", $import_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse',
                '/v2/organizations/{organizationId}/imports/account_settings/{importId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBulkAccountSettingsImports
     *
     * Returns the details/metadata for Bulk Account Settings Import requests in the organization
     *
     * @param ?string $organization_id The organization ID Guid
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse[]
     */
    public function getBulkAccountSettingsImports($organization_id)
    {
        list($response) = $this->getBulkAccountSettingsImportsWithHttpInfo($organization_id);
        return $response;
    }

    /**
     * Operation getBulkAccountSettingsImportsWithHttpInfo
     *
     * Returns the details/metadata for Bulk Account Settings Import requests in the organization
     *
     * @param ?string $organization_id The organization ID Guid
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getBulkAccountSettingsImportsWithHttpInfo($organization_id): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getBulkAccountSettingsImports');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/account_settings";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse[]',
                '/v2/organizations/{organizationId}/imports/account_settings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationAccountSettingsImportResponse[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBulkUserImportCSV
     *
     * Returns a text/csv file with user details for a User Import request
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $import_id The import ID Guid for the request
     *
     * @throws ApiException on non-2xx response
     * @return object
     */
    public function getBulkUserImportCSV($organization_id, $import_id)
    {
        list($response) = $this->getBulkUserImportCSVWithHttpInfo($organization_id, $import_id);
        return $response;
    }

    /**
     * Operation getBulkUserImportCSVWithHttpInfo
     *
     * Returns a text/csv file with user details for a User Import request
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $import_id The import ID Guid for the request
     *
     * @throws ApiException on non-2xx response
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBulkUserImportCSVWithHttpInfo($organization_id, $import_id): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getBulkUserImportCSV');
        }
        // verify the required parameter 'import_id' is set
        if ($import_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $import_id when calling getBulkUserImportCSV');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/bulk_users/{importId}/results_csv";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/csv']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($import_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "importId", $import_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'object',
                '/v2/organizations/{organizationId}/imports/bulk_users/{importId}/results_csv'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'object', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBulkUserImportRequest
     *
     * Returns the details/metadata for a User Import request
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $import_id The import ID Guid for the request
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationImportResponse
     */
    public function getBulkUserImportRequest($organization_id, $import_id)
    {
        list($response) = $this->getBulkUserImportRequestWithHttpInfo($organization_id, $import_id);
        return $response;
    }

    /**
     * Operation getBulkUserImportRequestWithHttpInfo
     *
     * Returns the details/metadata for a User Import request
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $import_id The import ID Guid for the request
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationImportResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBulkUserImportRequestWithHttpInfo($organization_id, $import_id): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getBulkUserImportRequest');
        }
        // verify the required parameter 'import_id' is set
        if ($import_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $import_id when calling getBulkUserImportRequest');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/bulk_users/{importId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($import_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "importId", $import_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationImportResponse',
                '/v2/organizations/{organizationId}/imports/bulk_users/{importId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationImportResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationImportResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBulkUserImportRequests
     *
     * Returns the details/metadata for Bulk User Import requests in the organization
     *
     * @param ?string $organization_id The organization ID Guid
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationImportsResponse
     */
    public function getBulkUserImportRequests($organization_id)
    {
        list($response) = $this->getBulkUserImportRequestsWithHttpInfo($organization_id);
        return $response;
    }

    /**
     * Operation getBulkUserImportRequestsWithHttpInfo
     *
     * Returns the details/metadata for Bulk User Import requests in the organization
     *
     * @param ?string $organization_id The organization ID Guid
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationImportsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBulkUserImportRequestsWithHttpInfo($organization_id): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getBulkUserImportRequests');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/imports/bulk_users";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationImportsResponse',
                '/v2/organizations/{organizationId}/imports/bulk_users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationImportsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationImportsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
