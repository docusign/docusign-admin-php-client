<?php
declare(strict_types=1);

/**
 * OrganizationsApi.
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The Docusign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docusign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Api\OrganizationsApi;



namespace DocuSign\Admin\Api;

use DocuSign\Admin\Client\ApiClient;
use DocuSign\Admin\Client\ApiException;
use DocuSign\Admin\Configuration;
use DocuSign\Admin\ObjectSerializer;

/**
 * OrganizationsApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The Docusign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationsApi
{
    /**
     * API Client
     *
     * @var ApiClient instance of the ApiClient
     */
    protected ApiClient $apiClient;

    /**
     * Constructor
     *
     * @param ApiClient|null $apiClient The api client to use
     *
     * @return void
     */
    public function __construct(ApiClient $apiClient = null)
    {
        $this->apiClient = $apiClient ?? new ApiClient();
    }

    /**
     * Get API client
     *
     * @return ApiClient get the API client
     */
    public function getApiClient(): ApiClient
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param ApiClient $apiClient set the API client
     *
     * @return self
     */
    public function setApiClient(ApiClient $apiClient): self
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Update $resourcePath with $
    *
    * @param string $resourcePath the resource path to use
    * @param string $baseName the base name param
    * @param string $paramName the parameter name
    *
    * @return string
    */
    public function updateResourcePath(string $resourcePath, string $baseName, string $paramName): string
    {
        return str_replace(
            "{" . $baseName . "}",
            $this->apiClient->getSerializer()->toPathValue($paramName),
            $resourcePath
        );
    }


    /**
     * Operation redactIndividualUserData
     *
     * Redacts membership and user data for users in an organization.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param \DocuSign\Admin\Model\IndividualUserDataRedactionRequest $request_model The request body describing the users and memberships to be redacted (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\IndividualUserDataRedactionResponse
     */
    public function redactIndividualUserData($organization_id, $request_model)
    {
        list($response) = $this->redactIndividualUserDataWithHttpInfo($organization_id, $request_model);
        return $response;
    }

    /**
     * Operation redactIndividualUserDataWithHttpInfo
     *
     * Redacts membership and user data for users in an organization.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param \DocuSign\Admin\Model\IndividualUserDataRedactionRequest $request_model The request body describing the users and memberships to be redacted (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\IndividualUserDataRedactionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function redactIndividualUserDataWithHttpInfo($organization_id, $request_model): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling redactIndividualUserData');
        }
        // verify the required parameter 'request_model' is set
        if ($request_model === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request_model when calling redactIndividualUserData');
        }
        // parse inputs
        $resourcePath = "/v2/data_redaction/organizations/{organizationId}/user";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($request_model)) {
            $_tempBody = $request_model;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\IndividualUserDataRedactionResponse',
                '/v2/data_redaction/organizations/{organizationId}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\IndividualUserDataRedactionResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\IndividualUserDataRedactionResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
