<?php
declare(strict_types=1);

/**
 * ProvisionAssetGroupApi.
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Api\ProvisionAssetGroupApi;


/**
 * GetAssetGroupAccountCloneOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetAssetGroupAccountCloneOptions
{
    /**
      * $include_details When true, include details for the asset group account clone.
      * @var ?bool
      */
    protected ?bool $include_details = null;

    /**
     * Gets include_details
     *
     * @return ?bool
     */
    public function getIncludeDetails(): ?bool
    {
        return $this->include_details;
    }

    /**
     * Sets include_details
     * @param ?bool $include_details When true, include details for the asset group account clone.
     *
     * @return self
     */
    public function setIncludeDetails(?bool $include_details): self
    {
        $this->include_details = $include_details;
        return $this;
    }
}


/**
 * GetAssetGroupAccountClonesByOrgIdOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetAssetGroupAccountClonesByOrgIdOptions
{
    /**
      * $since_updated_date When provided and is in the past, only return asset group account clone(s) that is updated after the date.
      * @var ?\DateTime
      */
    protected ?\DateTime $since_updated_date = null;

    /**
     * Gets since_updated_date
     *
     * @return \DateTime
     */
    public function getSinceUpdatedDate(): \DateTime
    {
        return $this->since_updated_date;
    }

    /**
     * Sets since_updated_date
     * @param \DateTime $since_updated_date When provided and is in the past, only return asset group account clone(s) that is updated after the date.
     *
     * @return self
     */
    public function setSinceUpdatedDate(\DateTime $since_updated_date): self
    {
        $this->since_updated_date = $since_updated_date;
        return $this;
    }
    /**
      * $include_details When true, include details for the asset group account clone(s).
      * @var ?bool
      */
    protected ?bool $include_details = null;

    /**
     * Gets include_details
     *
     * @return ?bool
     */
    public function getIncludeDetails(): ?bool
    {
        return $this->include_details;
    }

    /**
     * Sets include_details
     * @param ?bool $include_details When true, include details for the asset group account clone(s).
     *
     * @return self
     */
    public function setIncludeDetails(?bool $include_details): self
    {
        $this->include_details = $include_details;
        return $this;
    }
}


/**
 * GetAssetGroupAccountsOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetAssetGroupAccountsOptions
{
    /**
      * $compliant Whether to return accounts that are compliant. When provided, account responses will not include compliant field.
      * @var ?bool
      */
    protected ?bool $compliant = null;

    /**
     * Gets compliant
     *
     * @return ?bool
     */
    public function getCompliant(): ?bool
    {
        return $this->compliant;
    }

    /**
     * Sets compliant
     * @param ?bool $compliant Whether to return accounts that are compliant. When provided, account responses will not include compliant field.
     *
     * @return self
     */
    public function setCompliant(?bool $compliant): self
    {
        $this->compliant = $compliant;
        return $this;
    }
}



namespace DocuSign\Admin\Api;

use DocuSign\Admin\Client\ApiClient;
use DocuSign\Admin\Client\ApiException;
use DocuSign\Admin\Configuration;
use DocuSign\Admin\ObjectSerializer;

/**
 * ProvisionAssetGroupApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProvisionAssetGroupApi
{
    /**
     * API Client
     *
     * @var ApiClient instance of the ApiClient
     */
    protected ApiClient $apiClient;

    /**
     * Constructor
     *
     * @param ApiClient|null $apiClient The api client to use
     *
     * @return void
     */
    public function __construct(ApiClient $apiClient = null)
    {
        $this->apiClient = $apiClient ?? new ApiClient();
    }

    /**
     * Get API client
     *
     * @return ApiClient get the API client
     */
    public function getApiClient(): ApiClient
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param ApiClient $apiClient set the API client
     *
     * @return self
     */
    public function setApiClient(ApiClient $apiClient): self
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Update $resourcePath with $
    *
    * @param string $resourcePath the resource path to use
    * @param string $baseName the base name param
    * @param string $paramName the parameter name
    *
    * @return string
    */
    public function updateResourcePath(string $resourcePath, string $baseName, string $paramName): string
    {
        return str_replace(
            "{" . $baseName . "}",
            $this->apiClient->getSerializer()->toPathValue($paramName),
            $resourcePath
        );
    }


    /**
     * Operation cloneAssetGroupAccount
     *
     * Clones an existing DocuSign account to a new DocuSign account.
     *
     * @param ?string $organization_id The Guid representing the organization id.
     * @param \DocuSign\Admin\Model\AssetGroupAccountClone $request The request defails for the new asset group account clone. (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\AssetGroupAccountClone
     */
    public function cloneAssetGroupAccount($organization_id, $request)
    {
        list($response) = $this->cloneAssetGroupAccountWithHttpInfo($organization_id, $request);
        return $response;
    }

    /**
     * Operation cloneAssetGroupAccountWithHttpInfo
     *
     * Clones an existing DocuSign account to a new DocuSign account.
     *
     * @param ?string $organization_id The Guid representing the organization id.
     * @param \DocuSign\Admin\Model\AssetGroupAccountClone $request The request defails for the new asset group account clone. (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\AssetGroupAccountClone, HTTP status code, HTTP response headers (array of strings)
     */
    public function cloneAssetGroupAccountWithHttpInfo($organization_id, $request): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling cloneAssetGroupAccount');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling cloneAssetGroupAccount');
        }
        // parse inputs
        $resourcePath = "/v1/organizations/{organizationId}/assetGroups/accountClone";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\AssetGroupAccountClone',
                '/v1/organizations/{organizationId}/assetGroups/accountClone'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\AssetGroupAccountClone', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\AssetGroupAccountClone', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssetGroupAccountClone
     *
     * Gets an asset group account clone by the asset group work id.
     *
     * @param ?string $organization_id The Guid representing the organization id.
     * @param ?string $asset_group_id The Guid representing the asset group id.
     * @param ?string $asset_group_work_id The Guid representing the asset group account clone id
     * @param  \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountCloneOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\AssetGroupAccountClone
     */
    public function getAssetGroupAccountClone($organization_id, $asset_group_id, $asset_group_work_id, \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountCloneOptions $options = null)
    {
        list($response) = $this->getAssetGroupAccountCloneWithHttpInfo($organization_id, $asset_group_id, $asset_group_work_id, $options);
        return $response;
    }

    /**
     * Operation getAssetGroupAccountCloneWithHttpInfo
     *
     * Gets an asset group account clone by the asset group work id.
     *
     * @param ?string $organization_id The Guid representing the organization id.
     * @param ?string $asset_group_id The Guid representing the asset group id.
     * @param ?string $asset_group_work_id The Guid representing the asset group account clone id
     * @param  \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountCloneOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\AssetGroupAccountClone, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetGroupAccountCloneWithHttpInfo($organization_id, $asset_group_id, $asset_group_work_id, \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountCloneOptions $options = null): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getAssetGroupAccountClone');
        }
        // verify the required parameter 'asset_group_id' is set
        if ($asset_group_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_group_id when calling getAssetGroupAccountClone');
        }
        // verify the required parameter 'asset_group_work_id' is set
        if ($asset_group_work_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $asset_group_work_id when calling getAssetGroupAccountClone');
        }
        // parse inputs
        $resourcePath = "/v1/organizations/{organizationId}/assetGroups/{assetGroupId}/accountClones/{assetGroupWorkId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        if ($options != null)
        {
            // query params
            if ($options->getIncludeDetails() != 'null') {
                $queryParams['include_details'] = $this->apiClient->getSerializer()->toQueryValue($options->getIncludeDetails());
            }
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($asset_group_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "assetGroupId", $asset_group_id);
        }
        // path params
        if ($asset_group_work_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "assetGroupWorkId", $asset_group_work_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\AssetGroupAccountClone',
                '/v1/organizations/{organizationId}/assetGroups/{assetGroupId}/accountClones/{assetGroupWorkId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\AssetGroupAccountClone', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\AssetGroupAccountClone', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssetGroupAccountClonesByOrgId
     *
     * Gets all asset group account clone(s) for an organization id.
     *
     * @param ?string $organization_id The Guid representing the organization id.
     * @param  \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountClonesByOrgIdOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\AssetGroupAccountClones
     */
    public function getAssetGroupAccountClonesByOrgId($organization_id, \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountClonesByOrgIdOptions $options = null)
    {
        list($response) = $this->getAssetGroupAccountClonesByOrgIdWithHttpInfo($organization_id, $options);
        return $response;
    }

    /**
     * Operation getAssetGroupAccountClonesByOrgIdWithHttpInfo
     *
     * Gets all asset group account clone(s) for an organization id.
     *
     * @param ?string $organization_id The Guid representing the organization id.
     * @param  \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountClonesByOrgIdOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\AssetGroupAccountClones, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetGroupAccountClonesByOrgIdWithHttpInfo($organization_id, \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountClonesByOrgIdOptions $options = null): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getAssetGroupAccountClonesByOrgId');
        }
        // parse inputs
        $resourcePath = "/v1/organizations/{organizationId}/assetGroups/accountClones";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        if ($options != null)
        {
            // query params
            if ($options->getSinceUpdatedDate() != 'null') {
                $queryParams['since_updated_date'] = $this->apiClient->getSerializer()->toQueryValue($options->getSinceUpdatedDate());
            }
            if ($options->getIncludeDetails() != 'null') {
                $queryParams['include_details'] = $this->apiClient->getSerializer()->toQueryValue($options->getIncludeDetails());
            }
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\AssetGroupAccountClones',
                '/v1/organizations/{organizationId}/assetGroups/accountClones'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\AssetGroupAccountClones', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\AssetGroupAccountClones', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssetGroupAccounts
     *
     * Get all accounts in asset groups for the organization.
     *
     * @param ?string $organization_id The Guid representing the organization id.
     * @param  \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountsOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\AssetGroupAccountsResponse
     */
    public function getAssetGroupAccounts($organization_id, \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountsOptions $options = null)
    {
        list($response) = $this->getAssetGroupAccountsWithHttpInfo($organization_id, $options);
        return $response;
    }

    /**
     * Operation getAssetGroupAccountsWithHttpInfo
     *
     * Get all accounts in asset groups for the organization.
     *
     * @param ?string $organization_id The Guid representing the organization id.
     * @param  \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountsOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\AssetGroupAccountsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssetGroupAccountsWithHttpInfo($organization_id, \DocuSign\Admin\Api\ProvisionAssetGroupApi\GetAssetGroupAccountsOptions $options = null): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getAssetGroupAccounts');
        }
        // parse inputs
        $resourcePath = "/v1/organizations/{organizationId}/assetGroups/accounts";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        if ($options != null)
        {
            // query params
            if ($options->getCompliant() != 'null') {
                $queryParams['compliant'] = $this->apiClient->getSerializer()->toQueryValue($options->getCompliant());
            }
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\AssetGroupAccountsResponse',
                '/v1/organizations/{organizationId}/assetGroups/accounts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\AssetGroupAccountsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\AssetGroupAccountsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
