<?php
declare(strict_types=1);

/**
 * DSGroupsApi.
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Api\DSGroupsApi;


/**
 * GetDSGroupUsersOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetDSGroupUsersOptions
{
    /**
      * $page Start page of dsgroup users
      * @var ?int
      */
    protected ?int $page = null;

    /**
     * Gets page
     *
     * @return ?int
     */
    public function getPage(): ?int
    {
        return $this->page;
    }

    /**
     * Sets page
     * @param ?int $page Start page of dsgroup users
     *
     * @return self
     */
    public function setPage(?int $page): self
    {
        $this->page = $page;
        return $this;
    }
    /**
      * $page_size Page size of dsgroup users
      * @var ?int
      */
    protected ?int $page_size = null;

    /**
     * Gets page_size
     *
     * @return ?int
     */
    public function getPageSize(): ?int
    {
        return $this->page_size;
    }

    /**
     * Sets page_size
     * @param ?int $page_size Page size of dsgroup users
     *
     * @return self
     */
    public function setPageSize(?int $page_size): self
    {
        $this->page_size = $page_size;
        return $this;
    }
}


/**
 * GetDSGroupsOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetDSGroupsOptions
{
    /**
      * $page Start page of dsgroups
      * @var ?int
      */
    protected ?int $page = null;

    /**
     * Gets page
     *
     * @return ?int
     */
    public function getPage(): ?int
    {
        return $this->page;
    }

    /**
     * Sets page
     * @param ?int $page Start page of dsgroups
     *
     * @return self
     */
    public function setPage(?int $page): self
    {
        $this->page = $page;
        return $this;
    }
    /**
      * $page_size Page size of dsgroups
      * @var ?int
      */
    protected ?int $page_size = null;

    /**
     * Gets page_size
     *
     * @return ?int
     */
    public function getPageSize(): ?int
    {
        return $this->page_size;
    }

    /**
     * Sets page_size
     * @param ?int $page_size Page size of dsgroups
     *
     * @return self
     */
    public function setPageSize(?int $page_size): self
    {
        $this->page_size = $page_size;
        return $this;
    }
}



namespace DocuSign\Admin\Api;

use DocuSign\Admin\Client\ApiClient;
use DocuSign\Admin\Client\ApiException;
use DocuSign\Admin\Configuration;
use DocuSign\Admin\ObjectSerializer;

/**
 * DSGroupsApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DSGroupsApi
{
    /**
     * API Client
     *
     * @var ApiClient instance of the ApiClient
     */
    protected ApiClient $apiClient;

    /**
     * Constructor
     *
     * @param ApiClient|null $apiClient The api client to use
     *
     * @return void
     */
    public function __construct(ApiClient $apiClient = null)
    {
        $this->apiClient = $apiClient ?? new ApiClient();
    }

    /**
     * Get API client
     *
     * @return ApiClient get the API client
     */
    public function getApiClient(): ApiClient
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param ApiClient $apiClient set the API client
     *
     * @return self
     */
    public function setApiClient(ApiClient $apiClient): self
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Update $resourcePath with $
    *
    * @param string $resourcePath the resource path to use
    * @param string $baseName the base name param
    * @param string $paramName the parameter name
    *
    * @return string
    */
    public function updateResourcePath(string $resourcePath, string $baseName, string $paramName): string
    {
        return str_replace(
            "{" . $baseName . "}",
            $this->apiClient->getSerializer()->toPathValue($paramName),
            $resourcePath
        );
    }


    /**
     * Operation addDSGroup
     *
     * Add a new DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param \DocuSign\Admin\Model\DSGroupAddRequest $add_request Add DSGroup request object (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\DSGroupResponse
     */
    public function addDSGroup($organization_id, $account_id, $add_request)
    {
        list($response) = $this->addDSGroupWithHttpInfo($organization_id, $account_id, $add_request);
        return $response;
    }

    /**
     * Operation addDSGroupWithHttpInfo
     *
     * Add a new DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param \DocuSign\Admin\Model\DSGroupAddRequest $add_request Add DSGroup request object (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\DSGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDSGroupWithHttpInfo($organization_id, $account_id, $add_request): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling addDSGroup');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling addDSGroup');
        }
        // verify the required parameter 'add_request' is set
        if ($add_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $add_request when calling addDSGroup');
        }
        // parse inputs
        $resourcePath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($add_request)) {
            $_tempBody = $add_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\DSGroupResponse',
                '/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\DSGroupResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\DSGroupResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addDSGroupUsers
     *
     * Add list of users to a DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param ?string $ds_group_id The DSGroup ID GUID
     * @param \DocuSign\Admin\Model\DSGroupUsersAddRequest $d_s_group_users_add_request Add DSGroup users request object (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\AddDSGroupAndUsersResponse
     */
    public function addDSGroupUsers($organization_id, $account_id, $ds_group_id, $d_s_group_users_add_request)
    {
        list($response) = $this->addDSGroupUsersWithHttpInfo($organization_id, $account_id, $ds_group_id, $d_s_group_users_add_request);
        return $response;
    }

    /**
     * Operation addDSGroupUsersWithHttpInfo
     *
     * Add list of users to a DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param ?string $ds_group_id The DSGroup ID GUID
     * @param \DocuSign\Admin\Model\DSGroupUsersAddRequest $d_s_group_users_add_request Add DSGroup users request object (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\AddDSGroupAndUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDSGroupUsersWithHttpInfo($organization_id, $account_id, $ds_group_id, $d_s_group_users_add_request): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling addDSGroupUsers');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling addDSGroupUsers');
        }
        // verify the required parameter 'ds_group_id' is set
        if ($ds_group_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ds_group_id when calling addDSGroupUsers');
        }
        // verify the required parameter 'd_s_group_users_add_request' is set
        if ($d_s_group_users_add_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $d_s_group_users_add_request when calling addDSGroupUsers');
        }
        // parse inputs
        $resourcePath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($ds_group_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "dsGroupId", $ds_group_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($d_s_group_users_add_request)) {
            $_tempBody = $d_s_group_users_add_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\AddDSGroupAndUsersResponse',
                '/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\AddDSGroupAndUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\AddDSGroupAndUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteDSGroup
     *
     * Delete a DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param ?string $ds_group_id The DSGroup ID GUID
     *
     * @throws ApiException on non-2xx response
     * @return mixed
     */
    public function deleteDSGroup($organization_id, $account_id, $ds_group_id)
    {
        list($response) = $this->deleteDSGroupWithHttpInfo($organization_id, $account_id, $ds_group_id);
        return $response;
    }

    /**
     * Operation deleteDSGroupWithHttpInfo
     *
     * Delete a DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param ?string $ds_group_id The DSGroup ID GUID
     *
     * @throws ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDSGroupWithHttpInfo($organization_id, $account_id, $ds_group_id): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling deleteDSGroup');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteDSGroup');
        }
        // verify the required parameter 'ds_group_id' is set
        if ($ds_group_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ds_group_id when calling deleteDSGroup');
        }
        // parse inputs
        $resourcePath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($ds_group_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "dsGroupId", $ds_group_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getDSGroup
     *
     * Get list of DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param ?string $ds_group_id The dsGroup ID GUID
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\DSGroupResponse
     */
    public function getDSGroup($organization_id, $account_id, $ds_group_id)
    {
        list($response) = $this->getDSGroupWithHttpInfo($organization_id, $account_id, $ds_group_id);
        return $response;
    }

    /**
     * Operation getDSGroupWithHttpInfo
     *
     * Get list of DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param ?string $ds_group_id The dsGroup ID GUID
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\DSGroupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDSGroupWithHttpInfo($organization_id, $account_id, $ds_group_id): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getDSGroup');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getDSGroup');
        }
        // verify the required parameter 'ds_group_id' is set
        if ($ds_group_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ds_group_id when calling getDSGroup');
        }
        // parse inputs
        $resourcePath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($ds_group_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "dsGroupId", $ds_group_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\DSGroupResponse',
                '/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\DSGroupResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\DSGroupResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDSGroupUsers
     *
     * Get list of users in a DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param ?string $ds_group_id The DSGroup ID GUID
     * @param  \DocuSign\Admin\Api\DSGroupsApi\GetDSGroupUsersOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\DSGroupAndUsersResponse
     */
    public function getDSGroupUsers($organization_id, $account_id, $ds_group_id, \DocuSign\Admin\Api\DSGroupsApi\GetDSGroupUsersOptions $options = null)
    {
        list($response) = $this->getDSGroupUsersWithHttpInfo($organization_id, $account_id, $ds_group_id, $options);
        return $response;
    }

    /**
     * Operation getDSGroupUsersWithHttpInfo
     *
     * Get list of users in a DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param ?string $ds_group_id The DSGroup ID GUID
     * @param  \DocuSign\Admin\Api\DSGroupsApi\GetDSGroupUsersOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\DSGroupAndUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDSGroupUsersWithHttpInfo($organization_id, $account_id, $ds_group_id, \DocuSign\Admin\Api\DSGroupsApi\GetDSGroupUsersOptions $options = null): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getDSGroupUsers');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getDSGroupUsers');
        }
        // verify the required parameter 'ds_group_id' is set
        if ($ds_group_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ds_group_id when calling getDSGroupUsers');
        }
        // parse inputs
        $resourcePath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        if ($options != null)
        {
            // query params
            if ($options->getPage() != 'null') {
                $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($options->getPage());
            }
            if ($options->getPageSize() != 'null') {
                $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($options->getPageSize());
            }
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($ds_group_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "dsGroupId", $ds_group_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\DSGroupAndUsersResponse',
                '/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\DSGroupAndUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\DSGroupAndUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDSGroups
     *
     * Get list of DSGroups
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param  \DocuSign\Admin\Api\DSGroupsApi\GetDSGroupsOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\DSGroupListResponse
     */
    public function getDSGroups($organization_id, $account_id, \DocuSign\Admin\Api\DSGroupsApi\GetDSGroupsOptions $options = null)
    {
        list($response) = $this->getDSGroupsWithHttpInfo($organization_id, $account_id, $options);
        return $response;
    }

    /**
     * Operation getDSGroupsWithHttpInfo
     *
     * Get list of DSGroups
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param  \DocuSign\Admin\Api\DSGroupsApi\GetDSGroupsOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\DSGroupListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDSGroupsWithHttpInfo($organization_id, $account_id, \DocuSign\Admin\Api\DSGroupsApi\GetDSGroupsOptions $options = null): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getDSGroups');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getDSGroups');
        }
        // parse inputs
        $resourcePath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        if ($options != null)
        {
            // query params
            if ($options->getPage() != 'null') {
                $queryParams['page'] = $this->apiClient->getSerializer()->toQueryValue($options->getPage());
            }
            if ($options->getPageSize() != 'null') {
                $queryParams['page_size'] = $this->apiClient->getSerializer()->toQueryValue($options->getPageSize());
            }
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\DSGroupListResponse',
                '/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\DSGroupListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\DSGroupListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeDSGroupUsers
     *
     * Remove users from a DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param ?string $ds_group_id The DSGroup ID GUID
     * @param \DocuSign\Admin\Model\DSGroupUsersRemoveRequest $d_s_group_users_remove_request Remove DSGroup users request object (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\RemoveDSGroupUsersResponse
     */
    public function removeDSGroupUsers($organization_id, $account_id, $ds_group_id, $d_s_group_users_remove_request)
    {
        list($response) = $this->removeDSGroupUsersWithHttpInfo($organization_id, $account_id, $ds_group_id, $d_s_group_users_remove_request);
        return $response;
    }

    /**
     * Operation removeDSGroupUsersWithHttpInfo
     *
     * Remove users from a DSGroup
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param ?string $ds_group_id The DSGroup ID GUID
     * @param \DocuSign\Admin\Model\DSGroupUsersRemoveRequest $d_s_group_users_remove_request Remove DSGroup users request object (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\RemoveDSGroupUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeDSGroupUsersWithHttpInfo($organization_id, $account_id, $ds_group_id, $d_s_group_users_remove_request): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling removeDSGroupUsers');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling removeDSGroupUsers');
        }
        // verify the required parameter 'ds_group_id' is set
        if ($ds_group_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ds_group_id when calling removeDSGroupUsers');
        }
        // verify the required parameter 'd_s_group_users_remove_request' is set
        if ($d_s_group_users_remove_request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $d_s_group_users_remove_request when calling removeDSGroupUsers');
        }
        // parse inputs
        $resourcePath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }
        // path params
        if ($ds_group_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "dsGroupId", $ds_group_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($d_s_group_users_remove_request)) {
            $_tempBody = $d_s_group_users_remove_request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\RemoveDSGroupUsersResponse',
                '/v2.1/organizations/{organizationId}/accounts/{accountId}/dsgroups/{dsGroupId}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\RemoveDSGroupUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\RemoveDSGroupUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
