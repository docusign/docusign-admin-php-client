<?php
declare(strict_types=1);

/**
 * UsersApi.
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Admin API
 *
 * An API for an organization administrator to manage organizations, accounts and users
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Admin\Api\UsersApi;


/**
 * GetUserProfilesOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetUserProfilesOptions
{
    /**
      * $email The email address
      * @var ?string
      */
    protected ?string $email = null;

    /**
     * Gets email
     *
     * @return ?string
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Sets email
     * @param ?string $email The email address
     *
     * @return self
     */
    public function setEmail(?string $email): self
    {
        $this->email = $email;
        return $this;
    }
}


/**
 * GetUsersOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetUsersOptions
{
    /**
      * $start Index of first item to include in the response  Default value: 0
      * @var ?int
      */
    protected ?int $start = null;

    /**
     * Gets start
     *
     * @return ?int
     */
    public function getStart(): ?int
    {
        return $this->start;
    }

    /**
     * Sets start
     * @param ?int $start Index of first item to include in the response  Default value: 0
     *
     * @return self
     */
    public function setStart(?int $start): self
    {
        $this->start = $start;
        return $this;
    }
    /**
      * $take Page size of the response  Default value: 20
      * @var ?int
      */
    protected ?int $take = null;

    /**
     * Gets take
     *
     * @return ?int
     */
    public function getTake(): ?int
    {
        return $this->take;
    }

    /**
     * Sets take
     * @param ?int $take Page size of the response  Default value: 20
     *
     * @return self
     */
    public function setTake(?int $take): self
    {
        $this->take = $take;
        return $this;
    }
    /**
      * $end Index of the last item to include in the response. Ignored if 'take' parameter is specfied
      * @var ?int
      */
    protected ?int $end = null;

    /**
     * Gets end
     *
     * @return ?int
     */
    public function getEnd(): ?int
    {
        return $this->end;
    }

    /**
     * Sets end
     * @param ?int $end Index of the last item to include in the response. Ignored if 'take' parameter is specfied
     *
     * @return self
     */
    public function setEnd(?int $end): self
    {
        $this->end = $end;
        return $this;
    }
    /**
      * $email Email address of the desired user. At least one of email, account_id or organization_reserved_domain_id must be specified.
      * @var ?string
      */
    protected ?string $email = null;

    /**
     * Gets email
     *
     * @return ?string
     */
    public function getEmail(): ?string
    {
        return $this->email;
    }

    /**
     * Sets email
     * @param ?string $email Email address of the desired user. At least one of email, account_id or organization_reserved_domain_id must be specified.
     *
     * @return self
     */
    public function setEmail(?string $email): self
    {
        $this->email = $email;
        return $this;
    }
    /**
      * $email_user_name_like Selects users by pattern matching on the user's email address
      * @var ?string
      */
    protected ?string $email_user_name_like = null;

    /**
     * Gets email_user_name_like
     *
     * @return ?string
     */
    public function getEmailUserNameLike(): ?string
    {
        return $this->email_user_name_like;
    }

    /**
     * Sets email_user_name_like
     * @param ?string $email_user_name_like Selects users by pattern matching on the user's email address
     *
     * @return self
     */
    public function setEmailUserNameLike(?string $email_user_name_like): self
    {
        $this->email_user_name_like = $email_user_name_like;
        return $this;
    }
    /**
      * $status Select users based on user status
      * @var ?string
      */
    protected ?string $status = null;

    /**
     * Gets status
     *
     * @return ?string
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets status
     * @param ?string $status Select users based on user status
     *
     * @return self
     */
    public function setStatus(?string $status): self
    {
        $this->status = $status;
        return $this;
    }
    /**
      * $membership_status Select users based on membership status
      * @var ?string
      */
    protected ?string $membership_status = null;

    /**
     * Gets membership_status
     *
     * @return ?string
     */
    public function getMembershipStatus(): ?string
    {
        return $this->membership_status;
    }

    /**
     * Sets membership_status
     * @param ?string $membership_status Select users based on membership status
     *
     * @return self
     */
    public function setMembershipStatus(?string $membership_status): self
    {
        $this->membership_status = $membership_status;
        return $this;
    }
    /**
      * $account_id Select users that are members of the specified account. At least one of email, account_id or organization_reserved_domain_id must be specified.
      * @var ?string
      */
    protected ?string $account_id = null;

    /**
     * Gets account_id
     *
     * @return ?string
     */
    public function getAccountId(): ?string
    {
        return $this->account_id;
    }

    /**
     * Sets account_id
     * @param ?string $account_id Select users that are members of the specified account. At least one of email, account_id or organization_reserved_domain_id must be specified.
     *
     * @return self
     */
    public function setAccountId(?string $account_id): self
    {
        $this->account_id = $account_id;
        return $this;
    }
    /**
      * $organization_reserved_domain_id Select users that are in the specified domain. At least one of email, account_id or organization_reserved_domain_id must be specified.
      * @var ?string
      */
    protected ?string $organization_reserved_domain_id = null;

    /**
     * Gets organization_reserved_domain_id
     *
     * @return ?string
     */
    public function getOrganizationReservedDomainId(): ?string
    {
        return $this->organization_reserved_domain_id;
    }

    /**
     * Sets organization_reserved_domain_id
     * @param ?string $organization_reserved_domain_id Select users that are in the specified domain. At least one of email, account_id or organization_reserved_domain_id must be specified.
     *
     * @return self
     */
    public function setOrganizationReservedDomainId(?string $organization_reserved_domain_id): self
    {
        $this->organization_reserved_domain_id = $organization_reserved_domain_id;
        return $this;
    }
    /**
      * $last_modified_since Select users whose data have been modified since the date specified;  account_id or organization_reserved_domain_id must be specified.
      * @var ?string
      */
    protected ?string $last_modified_since = null;

    /**
     * Gets last_modified_since
     *
     * @return ?string
     */
    public function getLastModifiedSince(): ?string
    {
        return $this->last_modified_since;
    }

    /**
     * Sets last_modified_since
     * @param ?string $last_modified_since Select users whose data have been modified since the date specified;  account_id or organization_reserved_domain_id must be specified.
     *
     * @return self
     */
    public function setLastModifiedSince(?string $last_modified_since): self
    {
        $this->last_modified_since = $last_modified_since;
        return $this;
    }
}



namespace DocuSign\Admin\Api;

use DocuSign\Admin\Client\ApiClient;
use DocuSign\Admin\Client\ApiException;
use DocuSign\Admin\Configuration;
use DocuSign\Admin\ObjectSerializer;

/**
 * UsersApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Admin
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign eSignature PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UsersApi
{
    /**
     * API Client
     *
     * @var ApiClient instance of the ApiClient
     */
    protected ApiClient $apiClient;

    /**
     * Constructor
     *
     * @param ApiClient|null $apiClient The api client to use
     *
     * @return void
     */
    public function __construct(ApiClient $apiClient = null)
    {
        $this->apiClient = $apiClient ?? new ApiClient();
    }

    /**
     * Get API client
     *
     * @return ApiClient get the API client
     */
    public function getApiClient(): ApiClient
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param ApiClient $apiClient set the API client
     *
     * @return self
     */
    public function setApiClient(ApiClient $apiClient): self
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Update $resourcePath with $
    *
    * @param string $resourcePath the resource path to use
    * @param string $baseName the base name param
    * @param string $paramName the parameter name
    *
    * @return string
    */
    public function updateResourcePath(string $resourcePath, string $baseName, string $paramName): string
    {
        return str_replace(
            "{" . $baseName . "}",
            $this->apiClient->getSerializer()->toPathValue($paramName),
            $resourcePath
        );
    }


    /**
     * Operation activateMembership
     *
     * Activates user memberships
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $user_id The user ID Guid
     * @param ?string $membership_id The membership ID Guid
     * @param \DocuSign\Admin\Model\ForceActivateMembershipRequest $request Additional details about the user&#39;s membership (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\UpdateResponse
     */
    public function activateMembership($organization_id, $user_id, $membership_id, $request)
    {
        list($response) = $this->activateMembershipWithHttpInfo($organization_id, $user_id, $membership_id, $request);
        return $response;
    }

    /**
     * Operation activateMembershipWithHttpInfo
     *
     * Activates user memberships
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $user_id The user ID Guid
     * @param ?string $membership_id The membership ID Guid
     * @param \DocuSign\Admin\Model\ForceActivateMembershipRequest $request Additional details about the user&#39;s membership (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\UpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function activateMembershipWithHttpInfo($organization_id, $user_id, $membership_id, $request): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling activateMembership');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling activateMembership');
        }
        // verify the required parameter 'membership_id' is set
        if ($membership_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $membership_id when calling activateMembership');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling activateMembership');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/users/{userId}/memberships/{membershipId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "userId", $user_id);
        }
        // path params
        if ($membership_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "membershipId", $membership_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\UpdateResponse',
                '/v2/organizations/{organizationId}/users/{userId}/memberships/{membershipId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\UpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\UpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addOrUpdateUser
     *
     * Creates and updates a multi-product user
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param \DocuSign\Admin\Model\NewMultiProductUserAddRequest $request The request object (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\AddUserResponse
     */
    public function addOrUpdateUser($organization_id, $account_id, $request)
    {
        list($response) = $this->addOrUpdateUserWithHttpInfo($organization_id, $account_id, $request);
        return $response;
    }

    /**
     * Operation addOrUpdateUserWithHttpInfo
     *
     * Creates and updates a multi-product user
     *
     * @param ?string $organization_id The organization ID GUID
     * @param ?string $account_id The account ID GUID
     * @param \DocuSign\Admin\Model\NewMultiProductUserAddRequest $request The request object (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\AddUserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addOrUpdateUserWithHttpInfo($organization_id, $account_id, $request): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling addOrUpdateUser');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling addOrUpdateUser');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling addOrUpdateUser');
        }
        // parse inputs
        $resourcePath = "/v2.1/organizations/{organizationId}/accounts/{accountId}/users";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\AddUserResponse',
                '/v2.1/organizations/{organizationId}/accounts/{accountId}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\AddUserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\AddUserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addUsers
     *
     * Adds users to an account.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $account_id The account ID Guid
     * @param \DocuSign\Admin\Model\NewAccountUserRequest $request The details for the users to add to the account (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\NewUserResponse
     */
    public function addUsers($organization_id, $account_id, $request)
    {
        list($response) = $this->addUsersWithHttpInfo($organization_id, $account_id, $request);
        return $response;
    }

    /**
     * Operation addUsersWithHttpInfo
     *
     * Adds users to an account.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $account_id The account ID Guid
     * @param \DocuSign\Admin\Model\NewAccountUserRequest $request The details for the users to add to the account (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\NewUserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUsersWithHttpInfo($organization_id, $account_id, $request): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling addUsers');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling addUsers');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling addUsers');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/accounts/{accountId}/users";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\NewUserResponse',
                '/v2/organizations/{organizationId}/accounts/{accountId}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\NewUserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\NewUserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation closeMemberships
     *
     * Closes a user's memberships.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $user_id The user ID Guid
     * @param \DocuSign\Admin\Model\DeleteMembershipsRequest $request The details about which membership to close (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\DeleteMembershipsResponse
     */
    public function closeMemberships($organization_id, $user_id, $request)
    {
        list($response) = $this->closeMembershipsWithHttpInfo($organization_id, $user_id, $request);
        return $response;
    }

    /**
     * Operation closeMembershipsWithHttpInfo
     *
     * Closes a user's memberships.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $user_id The user ID Guid
     * @param \DocuSign\Admin\Model\DeleteMembershipsRequest $request The details about which membership to close (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\DeleteMembershipsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function closeMembershipsWithHttpInfo($organization_id, $user_id, $request): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling closeMemberships');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling closeMemberships');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling closeMemberships');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/users/{userId}/accounts";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "userId", $user_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\DeleteMembershipsResponse',
                '/v2/organizations/{organizationId}/users/{userId}/accounts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\DeleteMembershipsResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\DeleteMembershipsResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createUser
     *
     * Creates a new user
     *
     * @param ?string $organization_id The organization ID Guid
     * @param \DocuSign\Admin\Model\NewUserRequest $request Details about the user to be added (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\NewUserResponse
     */
    public function createUser($organization_id, $request)
    {
        list($response) = $this->createUserWithHttpInfo($organization_id, $request);
        return $response;
    }

    /**
     * Operation createUserWithHttpInfo
     *
     * Creates a new user
     *
     * @param ?string $organization_id The organization ID Guid
     * @param \DocuSign\Admin\Model\NewUserRequest $request Details about the user to be added (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\NewUserResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUserWithHttpInfo($organization_id, $request): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling createUser');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling createUser');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/users";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\NewUserResponse',
                '/v2/organizations/{organizationId}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\NewUserResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\NewUserResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteIdentities
     *
     * Deletes user identities.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $user_id The user ID Guid
     * @param \DocuSign\Admin\Model\DeleteUserIdentityRequest $request_model The details for the user identities to be deleted (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\DeleteResponse
     */
    public function deleteIdentities($organization_id, $user_id, $request_model)
    {
        list($response) = $this->deleteIdentitiesWithHttpInfo($organization_id, $user_id, $request_model);
        return $response;
    }

    /**
     * Operation deleteIdentitiesWithHttpInfo
     *
     * Deletes user identities.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param ?string $user_id The user ID Guid
     * @param \DocuSign\Admin\Model\DeleteUserIdentityRequest $request_model The details for the user identities to be deleted (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\DeleteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteIdentitiesWithHttpInfo($organization_id, $user_id, $request_model): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling deleteIdentities');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling deleteIdentities');
        }
        // verify the required parameter 'request_model' is set
        if ($request_model === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request_model when calling deleteIdentities');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/users/{userId}/identities";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "userId", $user_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($request_model)) {
            $_tempBody = $request_model;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\DeleteResponse',
                '/v2/organizations/{organizationId}/users/{userId}/identities'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\DeleteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\DeleteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUserProfiles
     *
     * Returns user information.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param  \DocuSign\Admin\Api\UsersApi\GetUserProfilesOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\UsersDrilldownResponse
     */
    public function getUserProfiles($organization_id, \DocuSign\Admin\Api\UsersApi\GetUserProfilesOptions $options = null)
    {
        list($response) = $this->getUserProfilesWithHttpInfo($organization_id, $options);
        return $response;
    }

    /**
     * Operation getUserProfilesWithHttpInfo
     *
     * Returns user information.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param  \DocuSign\Admin\Api\UsersApi\GetUserProfilesOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\UsersDrilldownResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserProfilesWithHttpInfo($organization_id, \DocuSign\Admin\Api\UsersApi\GetUserProfilesOptions $options = null): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getUserProfiles');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/users/profile";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        if ($options != null)
        {
            // query params
            if ($options->getEmail() != 'null') {
                $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($options->getEmail());
            }
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\UsersDrilldownResponse',
                '/v2/organizations/{organizationId}/users/profile'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\UsersDrilldownResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\UsersDrilldownResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsers
     *
     * Returns information about the users in the organization
     *
     * @param ?string $organization_id The organization ID Guid
     * @param  \DocuSign\Admin\Api\UsersApi\GetUsersOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\OrganizationUsersResponse
     */
    public function getUsers($organization_id, \DocuSign\Admin\Api\UsersApi\GetUsersOptions $options = null)
    {
        list($response) = $this->getUsersWithHttpInfo($organization_id, $options);
        return $response;
    }

    /**
     * Operation getUsersWithHttpInfo
     *
     * Returns information about the users in the organization
     *
     * @param ?string $organization_id The organization ID Guid
     * @param  \DocuSign\Admin\Api\UsersApi\GetUsersOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\OrganizationUsersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersWithHttpInfo($organization_id, \DocuSign\Admin\Api\UsersApi\GetUsersOptions $options = null): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling getUsers');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/users";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        if ($options != null)
        {
            // query params
            if ($options->getStart() != 'null') {
                $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($options->getStart());
            }
            if ($options->getTake() != 'null') {
                $queryParams['take'] = $this->apiClient->getSerializer()->toQueryValue($options->getTake());
            }
            if ($options->getEnd() != 'null') {
                $queryParams['end'] = $this->apiClient->getSerializer()->toQueryValue($options->getEnd());
            }
            if ($options->getEmail() != 'null') {
                $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($options->getEmail());
            }
            if ($options->getEmailUserNameLike() != 'null') {
                $queryParams['email_user_name_like'] = $this->apiClient->getSerializer()->toQueryValue($options->getEmailUserNameLike());
            }
            if ($options->getStatus() != 'null') {
                $queryParams['status'] = $this->apiClient->getSerializer()->toQueryValue($options->getStatus());
            }
            if ($options->getMembershipStatus() != 'null') {
                $queryParams['membership_status'] = $this->apiClient->getSerializer()->toQueryValue($options->getMembershipStatus());
            }
            if ($options->getAccountId() != 'null') {
                $queryParams['account_id'] = $this->apiClient->getSerializer()->toQueryValue($options->getAccountId());
            }
            if ($options->getOrganizationReservedDomainId() != 'null') {
                $queryParams['organization_reserved_domain_id'] = $this->apiClient->getSerializer()->toQueryValue($options->getOrganizationReservedDomainId());
            }
            if ($options->getLastModifiedSince() != 'null') {
                $queryParams['last_modified_since'] = $this->apiClient->getSerializer()->toQueryValue($options->getLastModifiedSince());
            }
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\OrganizationUsersResponse',
                '/v2/organizations/{organizationId}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\OrganizationUsersResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\OrganizationUsersResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateEmailAddress
     *
     * Updates a user's email address.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param \DocuSign\Admin\Model\UpdateUsersEmailRequest $request The details about which email addresses to update (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\UsersUpdateResponse
     */
    public function updateEmailAddress($organization_id, $request)
    {
        list($response) = $this->updateEmailAddressWithHttpInfo($organization_id, $request);
        return $response;
    }

    /**
     * Operation updateEmailAddressWithHttpInfo
     *
     * Updates a user's email address.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param \DocuSign\Admin\Model\UpdateUsersEmailRequest $request The details about which email addresses to update (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\UsersUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEmailAddressWithHttpInfo($organization_id, $request): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling updateEmailAddress');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling updateEmailAddress');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/users/email_addresses";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\UsersUpdateResponse',
                '/v2/organizations/{organizationId}/users/email_addresses'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\UsersUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\UsersUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateUser
     *
     * Updates a user.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param \DocuSign\Admin\Model\UpdateUsersRequest $request The user details to update (required)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Admin\Model\UsersUpdateResponse
     */
    public function updateUser($organization_id, $request)
    {
        list($response) = $this->updateUserWithHttpInfo($organization_id, $request);
        return $response;
    }

    /**
     * Operation updateUserWithHttpInfo
     *
     * Updates a user.
     *
     * @param ?string $organization_id The organization ID Guid
     * @param \DocuSign\Admin\Model\UpdateUsersRequest $request The user details to update (required)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Admin\Model\UsersUpdateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUserWithHttpInfo($organization_id, $request): array
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organization_id when calling updateUser');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling updateUser');
        }
        // parse inputs
        $resourcePath = "/v2/organizations/{organizationId}/users/profiles";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);


        // path params
        if ($organization_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "organizationId", $organization_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Admin\Model\UsersUpdateResponse',
                '/v2/organizations/{organizationId}/users/profiles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Admin\Model\UsersUpdateResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Admin\Model\UsersUpdateResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
